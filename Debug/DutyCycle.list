
DutyCycle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c34  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08004de4  08004de4  00005de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005014  08005014  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005014  08005014  00006014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800501c  0800501c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800501c  0800501c  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005020  08005020  00006020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005024  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000005c  08005080  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005080  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc14  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b01  00000000  00000000  00014ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000167a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a46  00000000  00000000  000174b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029741  00000000  00000000  00017efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f203  00000000  00000000  0004163f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102719  00000000  00000000  00050842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152f5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c94  00000000  00000000  00152fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00156c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004dcc 	.word	0x08004dcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08004dcc 	.word	0x08004dcc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
uint32_t arr_value;
uint32_t pulse_value;
uint8_t duty_cycle = 0;

int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
    HAL_Init();
 8000586:	f000 fbc8 	bl	8000d1a <HAL_Init>
    SystemClock_Config();
 800058a:	f000 f909 	bl	80007a0 <SystemClock_Config>
    MX_GPIO_Init();
 800058e:	f000 f96f 	bl	8000870 <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 8000592:	f000 f9a9 	bl	80008e8 <MX_LPUART1_UART_Init>

    while (1)
    {
        // Prompt user for PWM frequency
        uart_buf_len = sprintf(uart_buf, "Enter PWM Frequency (Hz):\r\n");
 8000596:	4967      	ldr	r1, [pc, #412]	@ (8000734 <main+0x1b4>)
 8000598:	4867      	ldr	r0, [pc, #412]	@ (8000738 <main+0x1b8>)
 800059a:	f003 ff77 	bl	800448c <siprintf>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a66      	ldr	r2, [pc, #408]	@ (800073c <main+0x1bc>)
 80005a2:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80005a4:	4b65      	ldr	r3, [pc, #404]	@ (800073c <main+0x1bc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	4962      	ldr	r1, [pc, #392]	@ (8000738 <main+0x1b8>)
 80005b0:	4863      	ldr	r0, [pc, #396]	@ (8000740 <main+0x1c0>)
 80005b2:	f003 f8bc 	bl	800372e <HAL_UART_Transmit>

        int count = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
        while(count < 10) {
 80005ba:	e012      	b.n	80005e2 <main+0x62>
            char ch;
            HAL_UART_Receive(&hlpuart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005bc:	1cf9      	adds	r1, r7, #3
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	2201      	movs	r2, #1
 80005c4:	485e      	ldr	r0, [pc, #376]	@ (8000740 <main+0x1c0>)
 80005c6:	f003 f93b 	bl	8003840 <HAL_UART_Receive>
            if (ch == '\r')
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	2b0d      	cmp	r3, #13
 80005ce:	d00c      	beq.n	80005ea <main+0x6a>
                break;
            input[count] = ch;
 80005d0:	78f9      	ldrb	r1, [r7, #3]
 80005d2:	4a5c      	ldr	r2, [pc, #368]	@ (8000744 <main+0x1c4>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4413      	add	r3, r2
 80005d8:	460a      	mov	r2, r1
 80005da:	701a      	strb	r2, [r3, #0]
            count++;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
        while(count < 10) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b09      	cmp	r3, #9
 80005e6:	dde9      	ble.n	80005bc <main+0x3c>
 80005e8:	e000      	b.n	80005ec <main+0x6c>
                break;
 80005ea:	bf00      	nop
        }
        input[count] = '\0';  // Null-terminate the string
 80005ec:	4a55      	ldr	r2, [pc, #340]	@ (8000744 <main+0x1c4>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
        pwm_frequency = atoi(input);
 80005f6:	4853      	ldr	r0, [pc, #332]	@ (8000744 <main+0x1c4>)
 80005f8:	f003 febf 	bl	800437a <atoi>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	4b51      	ldr	r3, [pc, #324]	@ (8000748 <main+0x1c8>)
 8000602:	601a      	str	r2, [r3, #0]

        // duty cycle
        uart_buf_len = sprintf(uart_buf, "Enter Duty Cycle (%%):\r\n");
 8000604:	4951      	ldr	r1, [pc, #324]	@ (800074c <main+0x1cc>)
 8000606:	484c      	ldr	r0, [pc, #304]	@ (8000738 <main+0x1b8>)
 8000608:	f003 ff40 	bl	800448c <siprintf>
 800060c:	4603      	mov	r3, r0
 800060e:	4a4b      	ldr	r2, [pc, #300]	@ (800073c <main+0x1bc>)
 8000610:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000612:	4b4a      	ldr	r3, [pc, #296]	@ (800073c <main+0x1bc>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	b29a      	uxth	r2, r3
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4946      	ldr	r1, [pc, #280]	@ (8000738 <main+0x1b8>)
 800061e:	4848      	ldr	r0, [pc, #288]	@ (8000740 <main+0x1c0>)
 8000620:	f003 f885 	bl	800372e <HAL_UART_Transmit>

        count = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
        while(count < 10) {
 8000628:	e012      	b.n	8000650 <main+0xd0>
            char ch;
            HAL_UART_Receive(&hlpuart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800062a:	1cb9      	adds	r1, r7, #2
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2201      	movs	r2, #1
 8000632:	4843      	ldr	r0, [pc, #268]	@ (8000740 <main+0x1c0>)
 8000634:	f003 f904 	bl	8003840 <HAL_UART_Receive>
            if (ch == '\r')
 8000638:	78bb      	ldrb	r3, [r7, #2]
 800063a:	2b0d      	cmp	r3, #13
 800063c:	d00c      	beq.n	8000658 <main+0xd8>
                break;
            input[count] = ch;
 800063e:	78b9      	ldrb	r1, [r7, #2]
 8000640:	4a40      	ldr	r2, [pc, #256]	@ (8000744 <main+0x1c4>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	460a      	mov	r2, r1
 8000648:	701a      	strb	r2, [r3, #0]
            count++;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
        while(count < 10) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b09      	cmp	r3, #9
 8000654:	dde9      	ble.n	800062a <main+0xaa>
 8000656:	e000      	b.n	800065a <main+0xda>
                break;
 8000658:	bf00      	nop
        }
        input[count] = '\0';  // Null-terminate the string
 800065a:	4a3a      	ldr	r2, [pc, #232]	@ (8000744 <main+0x1c4>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
        duty_cycle = atoi(input);
 8000664:	4837      	ldr	r0, [pc, #220]	@ (8000744 <main+0x1c4>)
 8000666:	f003 fe88 	bl	800437a <atoi>
 800066a:	4603      	mov	r3, r0
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b38      	ldr	r3, [pc, #224]	@ (8000750 <main+0x1d0>)
 8000670:	701a      	strb	r2, [r3, #0]

        arr_value = Calculate_Period(pwm_frequency);
 8000672:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <main+0x1c8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f87a 	bl	8000770 <Calculate_Period>
 800067c:	4603      	mov	r3, r0
 800067e:	4a35      	ldr	r2, [pc, #212]	@ (8000754 <main+0x1d4>)
 8000680:	6013      	str	r3, [r2, #0]

        pulse_value = (arr_value * duty_cycle) / 100;
 8000682:	4b33      	ldr	r3, [pc, #204]	@ (8000750 <main+0x1d0>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <main+0x1d4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	fb02 f303 	mul.w	r3, r2, r3
 8000690:	4a31      	ldr	r2, [pc, #196]	@ (8000758 <main+0x1d8>)
 8000692:	fba2 2303 	umull	r2, r3, r2, r3
 8000696:	095b      	lsrs	r3, r3, #5
 8000698:	4a30      	ldr	r2, [pc, #192]	@ (800075c <main+0x1dc>)
 800069a:	6013      	str	r3, [r2, #0]

        uart_buf_len = sprintf(uart_buf, "Value of ARR/Period is %lu\r\n", arr_value);
 800069c:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <main+0x1d4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	492f      	ldr	r1, [pc, #188]	@ (8000760 <main+0x1e0>)
 80006a4:	4824      	ldr	r0, [pc, #144]	@ (8000738 <main+0x1b8>)
 80006a6:	f003 fef1 	bl	800448c <siprintf>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a23      	ldr	r2, [pc, #140]	@ (800073c <main+0x1bc>)
 80006ae:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80006b0:	4b22      	ldr	r3, [pc, #136]	@ (800073c <main+0x1bc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	491f      	ldr	r1, [pc, #124]	@ (8000738 <main+0x1b8>)
 80006bc:	4820      	ldr	r0, [pc, #128]	@ (8000740 <main+0x1c0>)
 80006be:	f003 f836 	bl	800372e <HAL_UART_Transmit>

        uart_buf_len = sprintf(uart_buf, "Pulse value is %lu for %u%% duty cycle\r\n", pulse_value, duty_cycle);
 80006c2:	4b26      	ldr	r3, [pc, #152]	@ (800075c <main+0x1dc>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <main+0x1d0>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4926      	ldr	r1, [pc, #152]	@ (8000764 <main+0x1e4>)
 80006cc:	481a      	ldr	r0, [pc, #104]	@ (8000738 <main+0x1b8>)
 80006ce:	f003 fedd 	bl	800448c <siprintf>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a19      	ldr	r2, [pc, #100]	@ (800073c <main+0x1bc>)
 80006d6:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <main+0x1bc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	4915      	ldr	r1, [pc, #84]	@ (8000738 <main+0x1b8>)
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <main+0x1c0>)
 80006e6:	f003 f822 	bl	800372e <HAL_UART_Transmit>

        HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80006ea:	2104      	movs	r1, #4
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <main+0x1e8>)
 80006ee:	f002 fa85 	bl	8002bfc <HAL_TIM_PWM_Stop>
        MX_TIM4_Init(pwm_frequency, duty_cycle);
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <main+0x1c8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a16      	ldr	r2, [pc, #88]	@ (8000750 <main+0x1d0>)
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f91f 	bl	8000940 <MX_TIM4_Init>

        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000702:	2104      	movs	r1, #4
 8000704:	4818      	ldr	r0, [pc, #96]	@ (8000768 <main+0x1e8>)
 8000706:	f002 f973 	bl	80029f0 <HAL_TIM_PWM_Start>

        uart_buf_len = sprintf(uart_buf, "PWM Frequency is: %lu Hz, Duty Cycle is: %u%%\r\n", pwm_frequency, duty_cycle);
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <main+0x1c8>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <main+0x1d0>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	4916      	ldr	r1, [pc, #88]	@ (800076c <main+0x1ec>)
 8000714:	4808      	ldr	r0, [pc, #32]	@ (8000738 <main+0x1b8>)
 8000716:	f003 feb9 	bl	800448c <siprintf>
 800071a:	4603      	mov	r3, r0
 800071c:	4a07      	ldr	r2, [pc, #28]	@ (800073c <main+0x1bc>)
 800071e:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <main+0x1bc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	b29a      	uxth	r2, r3
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	4903      	ldr	r1, [pc, #12]	@ (8000738 <main+0x1b8>)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <main+0x1c0>)
 800072e:	f002 fffe 	bl	800372e <HAL_UART_Transmit>
    {
 8000732:	e730      	b.n	8000596 <main+0x16>
 8000734:	08004de4 	.word	0x08004de4
 8000738:	2000014c 	.word	0x2000014c
 800073c:	200001b0 	.word	0x200001b0
 8000740:	20000078 	.word	0x20000078
 8000744:	200001b4 	.word	0x200001b4
 8000748:	200001c0 	.word	0x200001c0
 800074c:	08004e00 	.word	0x08004e00
 8000750:	200001cc 	.word	0x200001cc
 8000754:	200001c4 	.word	0x200001c4
 8000758:	51eb851f 	.word	0x51eb851f
 800075c:	200001c8 	.word	0x200001c8
 8000760:	08004e1c 	.word	0x08004e1c
 8000764:	08004e3c 	.word	0x08004e3c
 8000768:	20000100 	.word	0x20000100
 800076c:	08004e68 	.word	0x08004e68

08000770 <Calculate_Period>:
    }
}

static uint32_t Calculate_Period(uint32_t pwm_frequency)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    uint32_t period = (80000000 / (pwm_frequency * (TIM_PRESCALAR + 1))) - 1;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	4a06      	ldr	r2, [pc, #24]	@ (800079c <Calculate_Period+0x2c>)
 8000784:	fbb2 f3f3 	udiv	r3, r2, r3
 8000788:	3b01      	subs	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
    return period;
 800078c:	68fb      	ldr	r3, [r7, #12]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	04c4b400 	.word	0x04c4b400

080007a0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b098      	sub	sp, #96	@ 0x60
 80007a4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2244      	movs	r2, #68	@ 0x44
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fe8c 	bl	80044cc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	4b28      	ldr	r3, [pc, #160]	@ (8000868 <SystemClock_Config+0xc8>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	4a27      	ldr	r2, [pc, #156]	@ (8000868 <SystemClock_Config+0xc8>)
 80007ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d0:	4b25      	ldr	r3, [pc, #148]	@ (8000868 <SystemClock_Config+0xc8>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	4b23      	ldr	r3, [pc, #140]	@ (800086c <SystemClock_Config+0xcc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80007e4:	4a21      	ldr	r2, [pc, #132]	@ (800086c <SystemClock_Config+0xcc>)
 80007e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <SystemClock_Config+0xcc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2340      	movs	r3, #64	@ 0x40
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000806:	2302      	movs	r3, #2
 8000808:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080a:	2302      	movs	r3, #2
 800080c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLM = 1;
 800080e:	2301      	movs	r3, #1
 8000810:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLN = 10;
 8000812:	230a      	movs	r3, #10
 8000814:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000816:	2307      	movs	r3, #7
 8000818:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd82 	bl	8001330 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x96>
    {
        Error_Handler();
 8000832:	f000 f8e3 	bl	80009fc <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	60bb      	str	r3, [r7, #8]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2104      	movs	r1, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f001 f987 	bl	8001b64 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xc0>
    {
        Error_Handler();
 800085c:	f000 f8ce 	bl	80009fc <Error_Handler>
    }
}
 8000860:	bf00      	nop
 8000862:	3760      	adds	r7, #96	@ 0x60
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	40007000 	.word	0x40007000

08000870 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init 0 */

    /* USER CODE END MX_GPIO_Init 0 */

    // Enable GPIO Ports Clock
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_GPIO_Init+0x70>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <MX_GPIO_Init+0x70>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <MX_GPIO_Init+0x70>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_GPIO_Init+0x70>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <MX_GPIO_Init+0x70>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_GPIO_Init+0x70>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

    // Configure GPIO pins : PG7 PG8
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8;
 80008b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008c8:	2308      	movs	r3, #8
 80008ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_GPIO_Init+0x74>)
 80008d4:	f000 fb7c 	bl	8000fd0 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init 1 */

    /* USER CODE END MX_GPIO_Init 1 */
}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48001800 	.word	0x48001800

080008e8 <MX_LPUART1_UART_Init>:

// LPUART1 Initialization Function
static void MX_LPUART1_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_LPUART1_UART_Init 0 */

    /* USER CODE END MX_LPUART1_UART_Init 0 */

    hlpuart1.Instance = LPUART1;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 80008ee:	4a13      	ldr	r2, [pc, #76]	@ (800093c <MX_LPUART1_UART_Init+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_LPUART1_UART_Init+0x50>)
 8000926:	f002 feb4 	bl	8003692 <HAL_UART_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_LPUART1_UART_Init+0x4c>
    {
        Error_Handler();
 8000930:	f000 f864 	bl	80009fc <Error_Handler>
    }
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000078 	.word	0x20000078
 800093c:	40008000 	.word	0x40008000

08000940 <MX_TIM4_Init>:

static void MX_TIM4_Init(uint32_t pwm_frequency, uint8_t duty_cycle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	70fb      	strb	r3, [r7, #3]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]
    uint32_t prescaler = TIM_PRESCALAR;
 8000960:	f641 733f 	movw	r3, #7999	@ 0x1f3f
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t arr_value = Calculate_Period(pwm_frequency);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ff02 	bl	8000770 <Calculate_Period>
 800096c:	62b8      	str	r0, [r7, #40]	@ 0x28
    uint32_t pulse_value = (arr_value * duty_cycle) / 100;
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000972:	fb02 f303 	mul.w	r3, r2, r3
 8000976:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <MX_TIM4_Init+0xb0>)
 8000978:	fba2 2303 	umull	r2, r3, r2, r3
 800097c:	095b      	lsrs	r3, r3, #5
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24

    htim4.Instance = TIM4;
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <MX_TIM4_Init+0xb4>)
 8000982:	4a1d      	ldr	r2, [pc, #116]	@ (80009f8 <MX_TIM4_Init+0xb8>)
 8000984:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = prescaler;
 8000986:	4a1b      	ldr	r2, [pc, #108]	@ (80009f4 <MX_TIM4_Init+0xb4>)
 8000988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800098a:	6053      	str	r3, [r2, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <MX_TIM4_Init+0xb4>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = arr_value;
 8000992:	4a18      	ldr	r2, [pc, #96]	@ (80009f4 <MX_TIM4_Init+0xb4>)
 8000994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000996:	60d3      	str	r3, [r2, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_TIM4_Init+0xb4>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_TIM4_Init+0xb4>)
 80009a0:	2280      	movs	r2, #128	@ 0x80
 80009a2:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009a4:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <MX_TIM4_Init+0xb4>)
 80009a6:	f001 ffcb 	bl	8002940 <HAL_TIM_PWM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM4_Init+0x74>
    {
        Error_Handler();
 80009b0:	f000 f824 	bl	80009fc <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b4:	2360      	movs	r3, #96	@ 0x60
 80009b6:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    sConfigOC.Pulse = pulse_value;
 80009cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ce:	60fb      	str	r3, [r7, #12]

    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2204      	movs	r2, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <MX_TIM4_Init+0xb4>)
 80009da:	f002 f9a5 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM4_Init+0xa8>
    {
        Error_Handler();
 80009e4:	f000 f80a 	bl	80009fc <Error_Handler>
    }

}
 80009e8:	bf00      	nop
 80009ea:	3730      	adds	r7, #48	@ 0x30
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	51eb851f 	.word	0x51eb851f
 80009f4:	20000100 	.word	0x20000100
 80009f8:	40000800 	.word	0x40000800

080009fc <Error_Handler>:
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x4>

08000a04 <HAL_TIM_PWM_MspInit>:

/* USER CODE END ExternalFunctions */

/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  HAL_TIM_Base_MspInit(htim);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f88b 	bl	8000b28 <HAL_TIM_Base_MspInit>
  HAL_TIM_MspPostInit(htim);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 f8a8 	bl	8000b68 <HAL_TIM_MspPostInit>

}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_MspInit+0x44>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	228c      	movs	r2, #140	@ 0x8c
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fd1f 	bl	80044cc <memset>
  if(huart->Instance==LPUART1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a22      	ldr	r2, [pc, #136]	@ (8000b1c <HAL_UART_MspInit+0xb4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d13d      	bne.n	8000b14 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a98:	2320      	movs	r3, #32
 8000a9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 fa81 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab0:	f7ff ffa4 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <HAL_UART_MspInit+0xb8>)
 8000ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ab8:	4a19      	ldr	r2, [pc, #100]	@ (8000b20 <HAL_UART_MspInit+0xb8>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <HAL_UART_MspInit+0xb8>)
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <HAL_UART_MspInit+0xb8>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad0:	4a13      	ldr	r2, [pc, #76]	@ (8000b20 <HAL_UART_MspInit+0xb8>)
 8000ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <HAL_UART_MspInit+0xb8>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000ae4:	f000 fc14 	bl	8001310 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ae8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000aec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b02:	2308      	movs	r3, #8
 8000b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <HAL_UART_MspInit+0xbc>)
 8000b10:	f000 fa5e 	bl	8000fd0 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000b14:	bf00      	nop
 8000b16:	37b0      	adds	r7, #176	@ 0xb0
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40008000 	.word	0x40008000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48001800 	.word	0x48001800

08000b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <HAL_TIM_Base_MspInit+0x38>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10b      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_TIM_Base_MspInit+0x3c>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <HAL_TIM_Base_MspInit+0x3c>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <HAL_TIM_Base_MspInit+0x3c>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40000800 	.word	0x40000800
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_TIM_MspPostInit+0x64>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d11b      	bne.n	8000bc2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_TIM_MspPostInit+0x68>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a10      	ldr	r2, [pc, #64]	@ (8000bd0 <HAL_TIM_MspPostInit+0x68>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <HAL_TIM_MspPostInit+0x68>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ba2:	2380      	movs	r3, #128	@ 0x80
 8000ba4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <HAL_TIM_MspPostInit+0x6c>)
 8000bbe:	f000 fa07 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40000800 	.word	0x40000800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2e:	f000 f8c9 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f003 fc38 	bl	80044dc <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20050000 	.word	0x20050000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	200001d0 	.word	0x200001d0
 8000ca0:	20000320 	.word	0x20000320

08000ca4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f003 fbf7 	bl	80044e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfa:	f7ff fc41 	bl	8000580 <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d0c:	08005024 	.word	0x08005024
  ldr r2, =_sbss
 8000d10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d14:	20000320 	.word	0x20000320

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>

08000d1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f91f 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f80e 	bl	8000d4c <HAL_InitTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	e001      	b.n	8000d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3c:	f7ff fe70 	bl	8000a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f91d 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f8f5 	bl	8000f7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	200001d4 	.word	0x200001d4

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200001d4 	.word	0x200001d4

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff47 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff5c 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff8e 	bl	8000ebc <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffb0 	bl	8000f24 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fde:	e166      	b.n	80012ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8158 	beq.w	80012a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b01      	cmp	r3, #1
 8001002:	d005      	beq.n	8001010 <HAL_GPIO_Init+0x40>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d130      	bne.n	8001072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001046:	2201      	movs	r2, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	f003 0201 	and.w	r2, r3, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b03      	cmp	r3, #3
 800107c:	d017      	beq.n	80010ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d123      	bne.n	8001102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	6939      	ldr	r1, [r7, #16]
 80010fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0203 	and.w	r2, r3, #3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 80b2 	beq.w	80012a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001144:	4b61      	ldr	r3, [pc, #388]	@ (80012cc <HAL_GPIO_Init+0x2fc>)
 8001146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001148:	4a60      	ldr	r2, [pc, #384]	@ (80012cc <HAL_GPIO_Init+0x2fc>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001150:	4b5e      	ldr	r3, [pc, #376]	@ (80012cc <HAL_GPIO_Init+0x2fc>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800115c:	4a5c      	ldr	r2, [pc, #368]	@ (80012d0 <HAL_GPIO_Init+0x300>)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001186:	d02b      	beq.n	80011e0 <HAL_GPIO_Init+0x210>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a52      	ldr	r2, [pc, #328]	@ (80012d4 <HAL_GPIO_Init+0x304>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d025      	beq.n	80011dc <HAL_GPIO_Init+0x20c>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a51      	ldr	r2, [pc, #324]	@ (80012d8 <HAL_GPIO_Init+0x308>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d01f      	beq.n	80011d8 <HAL_GPIO_Init+0x208>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a50      	ldr	r2, [pc, #320]	@ (80012dc <HAL_GPIO_Init+0x30c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d019      	beq.n	80011d4 <HAL_GPIO_Init+0x204>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a4f      	ldr	r2, [pc, #316]	@ (80012e0 <HAL_GPIO_Init+0x310>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d013      	beq.n	80011d0 <HAL_GPIO_Init+0x200>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a4e      	ldr	r2, [pc, #312]	@ (80012e4 <HAL_GPIO_Init+0x314>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d00d      	beq.n	80011cc <HAL_GPIO_Init+0x1fc>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a4d      	ldr	r2, [pc, #308]	@ (80012e8 <HAL_GPIO_Init+0x318>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d007      	beq.n	80011c8 <HAL_GPIO_Init+0x1f8>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4c      	ldr	r2, [pc, #304]	@ (80012ec <HAL_GPIO_Init+0x31c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d101      	bne.n	80011c4 <HAL_GPIO_Init+0x1f4>
 80011c0:	2307      	movs	r3, #7
 80011c2:	e00e      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c4:	2308      	movs	r3, #8
 80011c6:	e00c      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c8:	2306      	movs	r3, #6
 80011ca:	e00a      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011cc:	2305      	movs	r3, #5
 80011ce:	e008      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011d8:	2302      	movs	r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x212>
 80011e0:	2300      	movs	r3, #0
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f2:	4937      	ldr	r1, [pc, #220]	@ (80012d0 <HAL_GPIO_Init+0x300>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001200:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001224:	4a32      	ldr	r2, [pc, #200]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800122a:	4b31      	ldr	r3, [pc, #196]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800124e:	4a28      	ldr	r2, [pc, #160]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001254:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001278:	4a1d      	ldr	r2, [pc, #116]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800127e:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a2:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <HAL_GPIO_Init+0x320>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f ae91 	bne.w	8000fe0 <HAL_GPIO_Init+0x10>
  }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	48000c00 	.word	0x48000c00
 80012e0:	48001000 	.word	0x48001000
 80012e4:	48001400 	.word	0x48001400
 80012e8:	48001800 	.word	0x48001800
 80012ec:	48001c00 	.word	0x48001c00
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <HAL_PWREx_GetVoltageRange+0x18>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_PWREx_EnableVddIO2+0x1c>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800131e:	6053      	str	r3, [r2, #4]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40007000 	.word	0x40007000

08001330 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f000 bc08 	b.w	8001b54 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001344:	4b96      	ldr	r3, [pc, #600]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134e:	4b94      	ldr	r3, [pc, #592]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80e4 	beq.w	800152e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <HAL_RCC_OscConfig+0x4c>
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b0c      	cmp	r3, #12
 8001370:	f040 808b 	bne.w	800148a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2b01      	cmp	r3, #1
 8001378:	f040 8087 	bne.w	800148a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800137c:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_OscConfig+0x64>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e3df      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	4b81      	ldr	r3, [pc, #516]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_RCC_OscConfig+0x7e>
 80013a4:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013ac:	e005      	b.n	80013ba <HAL_RCC_OscConfig+0x8a>
 80013ae:	4b7c      	ldr	r3, [pc, #496]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d223      	bcs.n	8001406 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fd92 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e3c0      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d2:	4b73      	ldr	r3, [pc, #460]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a72      	ldr	r2, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b70      	ldr	r3, [pc, #448]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	496d      	ldr	r1, [pc, #436]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	4968      	ldr	r1, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
 8001404:	e025      	b.n	8001452 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001406:	4b66      	ldr	r3, [pc, #408]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a65      	ldr	r2, [pc, #404]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4960      	ldr	r1, [pc, #384]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001424:	4b5e      	ldr	r3, [pc, #376]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	495b      	ldr	r1, [pc, #364]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fd52 	bl	8001eec <RCC_SetFlashLatencyFromMSIRange>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e380      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001452:	f000 fc87 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001456:	4602      	mov	r2, r0
 8001458:	4b51      	ldr	r3, [pc, #324]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	4950      	ldr	r1, [pc, #320]	@ (80015a4 <HAL_RCC_OscConfig+0x274>)
 8001464:	5ccb      	ldrb	r3, [r1, r3]
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	fa22 f303 	lsr.w	r3, r2, r3
 800146e:	4a4e      	ldr	r2, [pc, #312]	@ (80015a8 <HAL_RCC_OscConfig+0x278>)
 8001470:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001472:	4b4e      	ldr	r3, [pc, #312]	@ (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fc68 	bl	8000d4c <HAL_InitTick>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d052      	beq.n	800152c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	e364      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d032      	beq.n	80014f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001492:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a42      	ldr	r2, [pc, #264]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149e:	f7ff fca5 	bl	8000dec <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a6:	f7ff fca1 	bl	8000dec <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e34d      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b8:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c4:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a35      	ldr	r2, [pc, #212]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4930      	ldr	r1, [pc, #192]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	492b      	ldr	r1, [pc, #172]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
 80014f6:	e01a      	b.n	800152e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a28      	ldr	r2, [pc, #160]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001504:	f7ff fc72 	bl	8000dec <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150c:	f7ff fc6e 	bl	8000dec <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e31a      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x1dc>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d073      	beq.n	8001622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b08      	cmp	r3, #8
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x21c>
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b0c      	cmp	r3, #12
 8001544:	d10e      	bne.n	8001564 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d063      	beq.n	8001620 <HAL_RCC_OscConfig+0x2f0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d15f      	bne.n	8001620 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e2f7      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x24c>
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a0b      	ldr	r2, [pc, #44]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e025      	b.n	80015c8 <HAL_RCC_OscConfig+0x298>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001584:	d114      	bne.n	80015b0 <HAL_RCC_OscConfig+0x280>
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a02      	ldr	r2, [pc, #8]	@ (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e013      	b.n	80015c8 <HAL_RCC_OscConfig+0x298>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08004e98 	.word	0x08004e98
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004
 80015b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc0c 	bl	8000dec <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fc08 	bl	8000dec <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	@ 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e2b4      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	4b92      	ldr	r3, [pc, #584]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2a8>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fbf8 	bl	8000dec <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fbf4 	bl	8000dec <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	@ 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e2a0      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x2d0>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d060      	beq.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d005      	beq.n	8001640 <HAL_RCC_OscConfig+0x310>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d119      	bne.n	800166e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d116      	bne.n	800166e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001640:	4b7c      	ldr	r3, [pc, #496]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x328>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e27d      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b76      	ldr	r3, [pc, #472]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	4973      	ldr	r1, [pc, #460]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166c:	e040      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d023      	beq.n	80016be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001676:	4b6f      	ldr	r3, [pc, #444]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6e      	ldr	r2, [pc, #440]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fbb3 	bl	8000dec <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fbaf 	bl	8000dec <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e25b      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	4b65      	ldr	r3, [pc, #404]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b62      	ldr	r3, [pc, #392]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	495f      	ldr	r1, [pc, #380]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
 80016bc:	e018      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b5d      	ldr	r3, [pc, #372]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb8f 	bl	8000dec <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fb8b 	bl	8000dec <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e237      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d03c      	beq.n	8001776 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01c      	beq.n	800173e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001704:	4b4b      	ldr	r3, [pc, #300]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800170a:	4a4a      	ldr	r2, [pc, #296]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fb6a 	bl	8000dec <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff fb66 	bl	8000dec <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e212      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ef      	beq.n	800171c <HAL_RCC_OscConfig+0x3ec>
 800173c:	e01b      	b.n	8001776 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173e:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001744:	4a3b      	ldr	r2, [pc, #236]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fb4d 	bl	8000dec <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fb49 	bl	8000dec <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1f5      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ef      	bne.n	8001756 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80a6 	beq.w	80018d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001788:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10d      	bne.n	80017b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a26      	ldr	r2, [pc, #152]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a0:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b0:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <HAL_RCC_OscConfig+0x508>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d118      	bne.n	80017ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <HAL_RCC_OscConfig+0x508>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <HAL_RCC_OscConfig+0x508>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c8:	f7ff fb10 	bl	8000dec <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d0:	f7ff fb0c 	bl	8000dec <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1b8      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_RCC_OscConfig+0x508>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_OscConfig+0x4d8>
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001806:	e029      	b.n	800185c <HAL_RCC_OscConfig+0x52c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d115      	bne.n	800183c <HAL_RCC_OscConfig+0x50c>
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001816:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001826:	4a03      	ldr	r2, [pc, #12]	@ (8001834 <HAL_RCC_OscConfig+0x504>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x52c>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	40007000 	.word	0x40007000
 800183c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001842:	4a9c      	ldr	r2, [pc, #624]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800184c:	4b99      	ldr	r3, [pc, #612]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001852:	4a98      	ldr	r2, [pc, #608]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d016      	beq.n	8001892 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fac2 	bl	8000dec <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fabe 	bl	8000dec <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e168      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ed      	beq.n	800186c <HAL_RCC_OscConfig+0x53c>
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff faab 	bl	8000dec <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff faa7 	bl	8000dec <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e151      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	4b80      	ldr	r3, [pc, #512]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ed      	bne.n	800189a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018be:	7ffb      	ldrb	r3, [r7, #31]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c8:	4a7a      	ldr	r2, [pc, #488]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03c      	beq.n	8001956 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01c      	beq.n	800191e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018e4:	4b73      	ldr	r3, [pc, #460]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80018e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ea:	4a72      	ldr	r2, [pc, #456]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa7a 	bl	8000dec <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fc:	f7ff fa76 	bl	8000dec <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e122      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800190e:	4b69      	ldr	r3, [pc, #420]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ef      	beq.n	80018fc <HAL_RCC_OscConfig+0x5cc>
 800191c:	e01b      	b.n	8001956 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800191e:	4b65      	ldr	r3, [pc, #404]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001924:	4a63      	ldr	r2, [pc, #396]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fa5d 	bl	8000dec <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001936:	f7ff fa59 	bl	8000dec <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e105      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001948:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 800194a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ef      	bne.n	8001936 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80f9 	beq.w	8001b52 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	2b02      	cmp	r3, #2
 8001966:	f040 80cf 	bne.w	8001b08 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800196a:	4b52      	ldr	r3, [pc, #328]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0203 	and.w	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197a:	429a      	cmp	r2, r3
 800197c:	d12c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001988:	3b01      	subs	r3, #1
 800198a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d123      	bne.n	80019d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d11b      	bne.n	80019d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d113      	bne.n	80019d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	3b01      	subs	r3, #1
 80019be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	3b01      	subs	r3, #1
 80019d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d071      	beq.n	8001abc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d068      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019de:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019ea:	4b32      	ldr	r3, [pc, #200]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0ac      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019fa:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001a00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a06:	f7ff f9f1 	bl	8000dec <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff f9ed 	bl	8000dec <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e099      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2c:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <HAL_RCC_OscConfig+0x788>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	4311      	orrs	r1, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a46:	0212      	lsls	r2, r2, #8
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a4e:	0852      	lsrs	r2, r2, #1
 8001a50:	3a01      	subs	r2, #1
 8001a52:	0552      	lsls	r2, r2, #21
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a5a:	0852      	lsrs	r2, r2, #1
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	0652      	lsls	r2, r2, #25
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a66:	06d2      	lsls	r2, r2, #27
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	4912      	ldr	r1, [pc, #72]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a70:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a88:	f7ff f9b0 	bl	8000dec <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f9ac 	bl	8000dec <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e058      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <HAL_RCC_OscConfig+0x784>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aae:	e050      	b.n	8001b52 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e04f      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d144      	bne.n	8001b52 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a23      	ldr	r2, [pc, #140]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad4:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ae0:	f7ff f984 	bl	8000dec <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f980 	bl	8000dec <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e02c      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x7b8>
 8001b06:	e024      	b.n	8001b52 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	d01f      	beq.n	8001b4e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001b14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f967 	bl	8000dec <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f963 	bl	8000dec <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e00f      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4905      	ldr	r1, [pc, #20]	@ (8001b5c <HAL_RCC_OscConfig+0x82c>)
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_RCC_OscConfig+0x830>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e001      	b.n	8001b52 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	feeefffc 	.word	0xfeeefffc

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0e7      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b75      	ldr	r3, [pc, #468]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d910      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b72      	ldr	r3, [pc, #456]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 0207 	bic.w	r2, r3, #7
 8001b8e:	4970      	ldr	r1, [pc, #448]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b6e      	ldr	r3, [pc, #440]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0cf      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d010      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b66      	ldr	r3, [pc, #408]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d908      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b63      	ldr	r3, [pc, #396]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4960      	ldr	r1, [pc, #384]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d04c      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b5a      	ldr	r3, [pc, #360]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d121      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0a6      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c02:	4b54      	ldr	r3, [pc, #336]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e09a      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e08e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e086      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4943      	ldr	r1, [pc, #268]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f8ce 	bl	8000dec <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7ff f8ca 	bl	8000dec <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e06e      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d208      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	492b      	ldr	r1, [pc, #172]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d210      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 0207 	bic.w	r2, r3, #7
 8001cc0:	4923      	ldr	r1, [pc, #140]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_RCC_ClockConfig+0x1ec>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e036      	b.n	8001d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4918      	ldr	r1, [pc, #96]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4910      	ldr	r1, [pc, #64]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d18:	f000 f824 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	490b      	ldr	r1, [pc, #44]	@ (8001d58 <HAL_RCC_ClockConfig+0x1f4>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <HAL_RCC_ClockConfig+0x1f8>)
 8001d36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f805 	bl	8000d4c <HAL_InitTick>
 8001d42:	4603      	mov	r3, r0
 8001d44:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d46:	7afb      	ldrb	r3, [r7, #11]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08004e98 	.word	0x08004e98
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d72:	4b3e      	ldr	r3, [pc, #248]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d121      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d11e      	bne.n	8001dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e005      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	e004      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d134      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d003      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0xac>
 8001e08:	e005      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e0c:	617b      	str	r3, [r7, #20]
      break;
 8001e0e:	e005      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e12:	617b      	str	r3, [r7, #20]
      break;
 8001e14:	e002      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	3301      	adds	r3, #1
 8001e28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0e5b      	lsrs	r3, r3, #25
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	@ 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08004eb0 	.word	0x08004eb0
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4904      	ldr	r1, [pc, #16]	@ (8001ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08004ea8 	.word	0x08004ea8

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec4:	f7ff ffda 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4904      	ldr	r1, [pc, #16]	@ (8001ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08004ea8 	.word	0x08004ea8

08001eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f04:	f7ff f9f6 	bl	80012f4 <HAL_PWREx_GetVoltageRange>
 8001f08:	6178      	str	r0, [r7, #20]
 8001f0a:	e014      	b.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	4a24      	ldr	r2, [pc, #144]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f18:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f24:	f7ff f9e6 	bl	80012f4 <HAL_PWREx_GetVoltageRange>
 8001f28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f3c:	d10b      	bne.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b80      	cmp	r3, #128	@ 0x80
 8001f42:	d919      	bls.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f48:	d902      	bls.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e013      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f50:	2301      	movs	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e010      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	@ 0x80
 8001f5a:	d902      	bls.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e00a      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b80      	cmp	r3, #128	@ 0x80
 8001f66:	d102      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e004      	b.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b70      	cmp	r3, #112	@ 0x70
 8001f72:	d101      	bne.n	8001f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 0207 	bic.w	r2, r3, #7
 8001f80:	4909      	ldr	r1, [pc, #36]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40022000 	.word	0x40022000

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001fd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fec:	d010      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff0:	4b86      	ldr	r3, [pc, #536]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a85      	ldr	r2, [pc, #532]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 facd 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3320      	adds	r3, #32
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fbb6 	bl	8002788 <RCCEx_PLLSAI2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002030:	4b76      	ldr	r3, [pc, #472]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800203e:	4973      	ldr	r1, [pc, #460]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d041      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800205c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002060:	d02a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002062:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002066:	d824      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800206c:	d008      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800206e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002072:	d81e      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800207c:	d010      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800207e:	e018      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002080:	4b62      	ldr	r3, [pc, #392]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a61      	ldr	r2, [pc, #388]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800208c:	e015      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fa85 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 800209a:	4603      	mov	r3, r0
 800209c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800209e:	e00c      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3320      	adds	r3, #32
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fb6e 	bl	8002788 <RCCEx_PLLSAI2_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b0:	e003      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	74fb      	strb	r3, [r7, #19]
      break;
 80020b6:	e000      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020c0:	4b52      	ldr	r3, [pc, #328]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ce:	494f      	ldr	r1, [pc, #316]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80020d6:	e001      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a0 	beq.w	800222a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ee:	4b47      	ldr	r3, [pc, #284]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b41      	ldr	r3, [pc, #260]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a40      	ldr	r2, [pc, #256]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002110:	4b3e      	ldr	r3, [pc, #248]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002120:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3a      	ldr	r2, [pc, #232]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800212c:	f7fe fe5e 	bl	8000dec <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002132:	e009      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7fe fe5a 	bl	8000dec <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d902      	bls.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	74fb      	strb	r3, [r7, #19]
        break;
 8002146:	e005      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002148:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d15c      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800215a:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002164:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01f      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	d019      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002178:	4b24      	ldr	r3, [pc, #144]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218a:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219a:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021a4:	4a19      	ldr	r2, [pc, #100]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7fe fe19 	bl	8000dec <HAL_GetTick>
 80021ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021bc:	e00b      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe fe15 	bl	8000dec <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d902      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	74fb      	strb	r3, [r7, #19]
            break;
 80021d4:	e006      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b0d      	ldr	r3, [pc, #52]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ec      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ea:	4b08      	ldr	r3, [pc, #32]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	4904      	ldr	r1, [pc, #16]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002202:	e009      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
 8002208:	e006      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002218:	7c7b      	ldrb	r3, [r7, #17]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4ba6      	ldr	r3, [pc, #664]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4aa5      	ldr	r2, [pc, #660]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002236:	4ba0      	ldr	r3, [pc, #640]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f023 0203 	bic.w	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	499c      	ldr	r1, [pc, #624]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002258:	4b97      	ldr	r3, [pc, #604]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f023 020c 	bic.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	4994      	ldr	r1, [pc, #592]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800227a:	4b8f      	ldr	r3, [pc, #572]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002280:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	498b      	ldr	r1, [pc, #556]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800229c:	4b86      	ldr	r3, [pc, #536]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	4983      	ldr	r1, [pc, #524]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022be:	4b7e      	ldr	r3, [pc, #504]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022cc:	497a      	ldr	r1, [pc, #488]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022e0:	4b75      	ldr	r3, [pc, #468]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	4972      	ldr	r1, [pc, #456]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002302:	4b6d      	ldr	r3, [pc, #436]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002310:	4969      	ldr	r1, [pc, #420]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002324:	4b64      	ldr	r3, [pc, #400]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002332:	4961      	ldr	r1, [pc, #388]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002346:	4b5c      	ldr	r3, [pc, #368]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002354:	4958      	ldr	r1, [pc, #352]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002368:	4b53      	ldr	r3, [pc, #332]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	4950      	ldr	r1, [pc, #320]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800238a:	4b4b      	ldr	r3, [pc, #300]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	4947      	ldr	r1, [pc, #284]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ac:	4b42      	ldr	r3, [pc, #264]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ba:	493f      	ldr	r1, [pc, #252]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d028      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ce:	4b3a      	ldr	r3, [pc, #232]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023dc:	4936      	ldr	r1, [pc, #216]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ec:	d106      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ee:	4b32      	ldr	r3, [pc, #200]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4a31      	ldr	r2, [pc, #196]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f8:	60d3      	str	r3, [r2, #12]
 80023fa:	e011      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002400:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002404:	d10c      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f8c9 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 8002412:	4603      	mov	r3, r0
 8002414:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d028      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800242c:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002432:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243a:	491f      	ldr	r1, [pc, #124]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800244a:	d106      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244c:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a19      	ldr	r2, [pc, #100]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002456:	60d3      	str	r3, [r2, #12]
 8002458:	e011      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800245e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002462:	d10c      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	2101      	movs	r1, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f89a 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002490:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002498:	4907      	ldr	r1, [pc, #28]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024a8:	d108      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024aa:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a02      	ldr	r2, [pc, #8]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024b4:	60d3      	str	r3, [r2, #12]
 80024b6:	e013      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80024b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f869 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d02f      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024ec:	4b2c      	ldr	r3, [pc, #176]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024fa:	4929      	ldr	r1, [pc, #164]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800250a:	d10d      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f846 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d014      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	74bb      	strb	r3, [r7, #18]
 8002526:	e011      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800252c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002530:	d10c      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3320      	adds	r3, #32
 8002536:	2102      	movs	r1, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f925 	bl	8002788 <RCCEx_PLLSAI2_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002568:	490d      	ldr	r1, [pc, #52]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00b      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800257c:	4b08      	ldr	r3, [pc, #32]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800258c:	4904      	ldr	r1, [pc, #16]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002594:	7cbb      	ldrb	r3, [r7, #18]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000

080025a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025b2:	4b74      	ldr	r3, [pc, #464]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d018      	beq.n	80025f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025be:	4b71      	ldr	r3, [pc, #452]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0203 	and.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d10d      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
       ||
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
       ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d047      	beq.n	800267a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	e044      	b.n	800267a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d018      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x86>
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d825      	bhi.n	8002648 <RCCEx_PLLSAI1_Config+0xa4>
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d002      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0x62>
 8002600:	2b02      	cmp	r3, #2
 8002602:	d009      	beq.n	8002618 <RCCEx_PLLSAI1_Config+0x74>
 8002604:	e020      	b.n	8002648 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002606:	4b5f      	ldr	r3, [pc, #380]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d11d      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002616:	e01a      	b.n	800264e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002618:	4b5a      	ldr	r3, [pc, #360]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d116      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002628:	e013      	b.n	8002652 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800262a:	4b56      	ldr	r3, [pc, #344]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10f      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002636:	4b53      	ldr	r3, [pc, #332]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002646:	e006      	b.n	8002656 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e004      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264e:	bf00      	nop
 8002650:	e002      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002656:	bf00      	nop
    }

    if(status == HAL_OK)
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800265e:	4b49      	ldr	r3, [pc, #292]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	430b      	orrs	r3, r1
 8002674:	4943      	ldr	r1, [pc, #268]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002676:	4313      	orrs	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d17c      	bne.n	800277a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002680:	4b40      	ldr	r3, [pc, #256]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3f      	ldr	r2, [pc, #252]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002686:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800268a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7fe fbae 	bl	8000dec <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002692:	e009      	b.n	80026a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002694:	f7fe fbaa 	bl	8000dec <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d902      	bls.n	80026a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	73fb      	strb	r3, [r7, #15]
        break;
 80026a6:	e005      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a8:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ef      	bne.n	8002694 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d15f      	bne.n	800277a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d110      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c0:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80026c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6892      	ldr	r2, [r2, #8]
 80026d0:	0211      	lsls	r1, r2, #8
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68d2      	ldr	r2, [r2, #12]
 80026d6:	06d2      	lsls	r2, r2, #27
 80026d8:	430a      	orrs	r2, r1
 80026da:	492a      	ldr	r1, [pc, #168]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	610b      	str	r3, [r1, #16]
 80026e0:	e027      	b.n	8002732 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d112      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e8:	4b26      	ldr	r3, [pc, #152]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	0211      	lsls	r1, r2, #8
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6912      	ldr	r2, [r2, #16]
 80026fe:	0852      	lsrs	r2, r2, #1
 8002700:	3a01      	subs	r2, #1
 8002702:	0552      	lsls	r2, r2, #21
 8002704:	430a      	orrs	r2, r1
 8002706:	491f      	ldr	r1, [pc, #124]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	610b      	str	r3, [r1, #16]
 800270c:	e011      	b.n	8002732 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800270e:	4b1d      	ldr	r3, [pc, #116]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002716:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6892      	ldr	r2, [r2, #8]
 800271e:	0211      	lsls	r1, r2, #8
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6952      	ldr	r2, [r2, #20]
 8002724:	0852      	lsrs	r2, r2, #1
 8002726:	3a01      	subs	r2, #1
 8002728:	0652      	lsls	r2, r2, #25
 800272a:	430a      	orrs	r2, r1
 800272c:	4915      	ldr	r1, [pc, #84]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272e:	4313      	orrs	r3, r2
 8002730:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002732:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a13      	ldr	r2, [pc, #76]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002738:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800273c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fb55 	bl	8000dec <HAL_GetTick>
 8002742:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002744:	e009      	b.n	800275a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002746:	f7fe fb51 	bl	8000dec <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d902      	bls.n	800275a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	73fb      	strb	r3, [r7, #15]
          break;
 8002758:	e005      	b.n	8002766 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800275a:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ef      	beq.n	8002746 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d106      	bne.n	800277a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800276c:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000

08002788 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002796:	4b69      	ldr	r3, [pc, #420]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d018      	beq.n	80027d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027a2:	4b66      	ldr	r3, [pc, #408]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0203 	and.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d10d      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
       ||
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027ba:	4b60      	ldr	r3, [pc, #384]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
       ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d047      	beq.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e044      	b.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d018      	beq.n	800280e <RCCEx_PLLSAI2_Config+0x86>
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d825      	bhi.n	800282c <RCCEx_PLLSAI2_Config+0xa4>
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d002      	beq.n	80027ea <RCCEx_PLLSAI2_Config+0x62>
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d009      	beq.n	80027fc <RCCEx_PLLSAI2_Config+0x74>
 80027e8:	e020      	b.n	800282c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ea:	4b54      	ldr	r3, [pc, #336]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11d      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fa:	e01a      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027fc:	4b4f      	ldr	r3, [pc, #316]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d116      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280c:	e013      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800280e:	4b4b      	ldr	r3, [pc, #300]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800281a:	4b48      	ldr	r3, [pc, #288]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800282a:	e006      	b.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e004      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002832:	bf00      	nop
 8002834:	e002      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800283a:	bf00      	nop
    }

    if(status == HAL_OK)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002842:	4b3e      	ldr	r3, [pc, #248]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	430b      	orrs	r3, r1
 8002858:	4938      	ldr	r1, [pc, #224]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d166      	bne.n	8002932 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002864:	4b35      	ldr	r3, [pc, #212]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a34      	ldr	r2, [pc, #208]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7fe fabc 	bl	8000dec <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002876:	e009      	b.n	800288c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002878:	f7fe fab8 	bl	8000dec <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d902      	bls.n	800288c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	73fb      	strb	r3, [r7, #15]
        break;
 800288a:	e005      	b.n	8002898 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800288c:	4b2b      	ldr	r3, [pc, #172]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ef      	bne.n	8002878 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d149      	bne.n	8002932 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d110      	bne.n	80028c6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a4:	4b25      	ldr	r3, [pc, #148]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80028ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6892      	ldr	r2, [r2, #8]
 80028b4:	0211      	lsls	r1, r2, #8
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	06d2      	lsls	r2, r2, #27
 80028bc:	430a      	orrs	r2, r1
 80028be:	491f      	ldr	r1, [pc, #124]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	614b      	str	r3, [r1, #20]
 80028c4:	e011      	b.n	80028ea <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c6:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6892      	ldr	r2, [r2, #8]
 80028d6:	0211      	lsls	r1, r2, #8
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6912      	ldr	r2, [r2, #16]
 80028dc:	0852      	lsrs	r2, r2, #1
 80028de:	3a01      	subs	r2, #1
 80028e0:	0652      	lsls	r2, r2, #25
 80028e2:	430a      	orrs	r2, r1
 80028e4:	4915      	ldr	r1, [pc, #84]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028ea:	4b14      	ldr	r3, [pc, #80]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a13      	ldr	r2, [pc, #76]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe fa79 	bl	8000dec <HAL_GetTick>
 80028fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028fc:	e009      	b.n	8002912 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028fe:	f7fe fa75 	bl	8000dec <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d902      	bls.n	8002912 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	73fb      	strb	r3, [r7, #15]
          break;
 8002910:	e005      	b.n	800291e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ef      	beq.n	80028fe <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	4903      	ldr	r1, [pc, #12]	@ (800293c <RCCEx_PLLSAI2_Config+0x1b4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e049      	b.n	80029e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe f84c 	bl	8000a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f000 fae6 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_TIM_PWM_Start+0x24>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e03c      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d109      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x3e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	e02f      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d109      	bne.n	8002a48 <HAL_TIM_PWM_Start+0x58>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e022      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d109      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x72>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	e015      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d109      	bne.n	8002a7c <HAL_TIM_PWM_Start+0x8c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	bf14      	ite	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	2300      	moveq	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e008      	b.n	8002a8e <HAL_TIM_PWM_Start+0x9e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e09c      	b.n	8002bd0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0xb6>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aa4:	e023      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d104      	bne.n	8002ab6 <HAL_TIM_PWM_Start+0xc6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ab4:	e01b      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0xd6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ac4:	e013      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b0c      	cmp	r3, #12
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0xe6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ad4:	e00b      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0xf6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae4:	e003      	b.n	8002aee <HAL_TIM_PWM_Start+0xfe>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fda6 	bl	8003648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a35      	ldr	r2, [pc, #212]	@ (8002bd8 <HAL_TIM_PWM_Start+0x1e8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x13e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a34      	ldr	r2, [pc, #208]	@ (8002bdc <HAL_TIM_PWM_Start+0x1ec>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x13e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <HAL_TIM_PWM_Start+0x1f0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x13e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a31      	ldr	r2, [pc, #196]	@ (8002be4 <HAL_TIM_PWM_Start+0x1f4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_TIM_PWM_Start+0x13e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2f      	ldr	r2, [pc, #188]	@ (8002be8 <HAL_TIM_PWM_Start+0x1f8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PWM_Start+0x142>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_TIM_PWM_Start+0x144>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a22      	ldr	r2, [pc, #136]	@ (8002bd8 <HAL_TIM_PWM_Start+0x1e8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01d      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5a:	d018      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a22      	ldr	r2, [pc, #136]	@ (8002bec <HAL_TIM_PWM_Start+0x1fc>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a21      	ldr	r2, [pc, #132]	@ (8002bf0 <HAL_TIM_PWM_Start+0x200>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00e      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf4 <HAL_TIM_PWM_Start+0x204>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d009      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a17      	ldr	r2, [pc, #92]	@ (8002bdc <HAL_TIM_PWM_Start+0x1ec>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_TIM_PWM_Start+0x19e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a15      	ldr	r2, [pc, #84]	@ (8002be0 <HAL_TIM_PWM_Start+0x1f0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d115      	bne.n	8002bba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <HAL_TIM_PWM_Start+0x208>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b06      	cmp	r3, #6
 8002b9e:	d015      	beq.n	8002bcc <HAL_TIM_PWM_Start+0x1dc>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba6:	d011      	beq.n	8002bcc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	e008      	b.n	8002bcc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e000      	b.n	8002bce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40013400 	.word	0x40013400
 8002be0:	40014000 	.word	0x40014000
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40014800 	.word	0x40014800
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40000c00 	.word	0x40000c00
 8002bf8:	00010007 	.word	0x00010007

08002bfc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fd1a 	bl	8003648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3e      	ldr	r2, [pc, #248]	@ (8002d14 <HAL_TIM_PWM_Stop+0x118>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_TIM_PWM_Stop+0x4a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	@ (8002d18 <HAL_TIM_PWM_Stop+0x11c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_TIM_PWM_Stop+0x4a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d1c <HAL_TIM_PWM_Stop+0x120>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_TIM_PWM_Stop+0x4a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a3a      	ldr	r2, [pc, #232]	@ (8002d20 <HAL_TIM_PWM_Stop+0x124>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_TIM_PWM_Stop+0x4a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a38      	ldr	r2, [pc, #224]	@ (8002d24 <HAL_TIM_PWM_Stop+0x128>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PWM_Stop+0x4e>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_TIM_PWM_Stop+0x50>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d017      	beq.n	8002c80 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10f      	bne.n	8002c80 <HAL_TIM_PWM_Stop+0x84>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a1a      	ldr	r2, [r3, #32]
 8002c66:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_PWM_Stop+0x84>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_TIM_PWM_Stop+0xb4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_TIM_PWM_Stop+0xb4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <HAL_TIM_PWM_Stop+0xc4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cbe:	e023      	b.n	8002d08 <HAL_TIM_PWM_Stop+0x10c>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d104      	bne.n	8002cd0 <HAL_TIM_PWM_Stop+0xd4>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cce:	e01b      	b.n	8002d08 <HAL_TIM_PWM_Stop+0x10c>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d104      	bne.n	8002ce0 <HAL_TIM_PWM_Stop+0xe4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cde:	e013      	b.n	8002d08 <HAL_TIM_PWM_Stop+0x10c>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d104      	bne.n	8002cf0 <HAL_TIM_PWM_Stop+0xf4>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002cee:	e00b      	b.n	8002d08 <HAL_TIM_PWM_Stop+0x10c>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d104      	bne.n	8002d00 <HAL_TIM_PWM_Stop+0x104>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cfe:	e003      	b.n	8002d08 <HAL_TIM_PWM_Stop+0x10c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40013400 	.word	0x40013400
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	40014400 	.word	0x40014400
 8002d24:	40014800 	.word	0x40014800

08002d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0ff      	b.n	8002f46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b14      	cmp	r3, #20
 8002d52:	f200 80f0 	bhi.w	8002f36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d56:	a201      	add	r2, pc, #4	@ (adr r2, 8002d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002db1 	.word	0x08002db1
 8002d60:	08002f37 	.word	0x08002f37
 8002d64:	08002f37 	.word	0x08002f37
 8002d68:	08002f37 	.word	0x08002f37
 8002d6c:	08002df1 	.word	0x08002df1
 8002d70:	08002f37 	.word	0x08002f37
 8002d74:	08002f37 	.word	0x08002f37
 8002d78:	08002f37 	.word	0x08002f37
 8002d7c:	08002e33 	.word	0x08002e33
 8002d80:	08002f37 	.word	0x08002f37
 8002d84:	08002f37 	.word	0x08002f37
 8002d88:	08002f37 	.word	0x08002f37
 8002d8c:	08002e73 	.word	0x08002e73
 8002d90:	08002f37 	.word	0x08002f37
 8002d94:	08002f37 	.word	0x08002f37
 8002d98:	08002f37 	.word	0x08002f37
 8002d9c:	08002eb5 	.word	0x08002eb5
 8002da0:	08002f37 	.word	0x08002f37
 8002da4:	08002f37 	.word	0x08002f37
 8002da8:	08002f37 	.word	0x08002f37
 8002dac:	08002ef5 	.word	0x08002ef5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f970 	bl	800309c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6999      	ldr	r1, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	619a      	str	r2, [r3, #24]
      break;
 8002dee:	e0a5      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f9e0 	bl	80031bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	021a      	lsls	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
      break;
 8002e30:	e084      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fa49 	bl	80032d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0208 	orr.w	r2, r2, #8
 8002e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0204 	bic.w	r2, r2, #4
 8002e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
      break;
 8002e70:	e064      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fab1 	bl	80033e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	61da      	str	r2, [r3, #28]
      break;
 8002eb2:	e043      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fafa 	bl	80034b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0204 	bic.w	r2, r2, #4
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ef2:	e023      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fb3e 	bl	800357c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f34:	e002      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop

08002f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a46      	ldr	r2, [pc, #280]	@ (800307c <TIM_Base_SetConfig+0x12c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6e:	d00f      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a43      	ldr	r2, [pc, #268]	@ (8003080 <TIM_Base_SetConfig+0x130>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a42      	ldr	r2, [pc, #264]	@ (8003084 <TIM_Base_SetConfig+0x134>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a41      	ldr	r2, [pc, #260]	@ (8003088 <TIM_Base_SetConfig+0x138>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a40      	ldr	r2, [pc, #256]	@ (800308c <TIM_Base_SetConfig+0x13c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d108      	bne.n	8002fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a35      	ldr	r2, [pc, #212]	@ (800307c <TIM_Base_SetConfig+0x12c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb0:	d01b      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a32      	ldr	r2, [pc, #200]	@ (8003080 <TIM_Base_SetConfig+0x130>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d017      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a31      	ldr	r2, [pc, #196]	@ (8003084 <TIM_Base_SetConfig+0x134>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a30      	ldr	r2, [pc, #192]	@ (8003088 <TIM_Base_SetConfig+0x138>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00f      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800308c <TIM_Base_SetConfig+0x13c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8003090 <TIM_Base_SetConfig+0x140>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8003094 <TIM_Base_SetConfig+0x144>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0x9a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8003098 <TIM_Base_SetConfig+0x148>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a16      	ldr	r2, [pc, #88]	@ (800307c <TIM_Base_SetConfig+0x12c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00f      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a18      	ldr	r2, [pc, #96]	@ (800308c <TIM_Base_SetConfig+0x13c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00b      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a17      	ldr	r2, [pc, #92]	@ (8003090 <TIM_Base_SetConfig+0x140>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <TIM_Base_SetConfig+0x144>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0xf8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a15      	ldr	r2, [pc, #84]	@ (8003098 <TIM_Base_SetConfig+0x148>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d103      	bne.n	8003050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f023 0201 	bic.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	611a      	str	r2, [r3, #16]
  }
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40012c00 	.word	0x40012c00
 8003080:	40000400 	.word	0x40000400
 8003084:	40000800 	.word	0x40000800
 8003088:	40000c00 	.word	0x40000c00
 800308c:	40013400 	.word	0x40013400
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400
 8003098:	40014800 	.word	0x40014800

0800309c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 0201 	bic.w	r2, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0303 	bic.w	r3, r3, #3
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f023 0302 	bic.w	r3, r3, #2
 80030e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a2c      	ldr	r2, [pc, #176]	@ (80031a8 <TIM_OC1_SetConfig+0x10c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00f      	beq.n	800311c <TIM_OC1_SetConfig+0x80>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a2b      	ldr	r2, [pc, #172]	@ (80031ac <TIM_OC1_SetConfig+0x110>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <TIM_OC1_SetConfig+0x80>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a2a      	ldr	r2, [pc, #168]	@ (80031b0 <TIM_OC1_SetConfig+0x114>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_OC1_SetConfig+0x80>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a29      	ldr	r2, [pc, #164]	@ (80031b4 <TIM_OC1_SetConfig+0x118>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_OC1_SetConfig+0x80>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <TIM_OC1_SetConfig+0x11c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d10c      	bne.n	8003136 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0308 	bic.w	r3, r3, #8
 8003122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <TIM_OC1_SetConfig+0x10c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00f      	beq.n	800315e <TIM_OC1_SetConfig+0xc2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a1a      	ldr	r2, [pc, #104]	@ (80031ac <TIM_OC1_SetConfig+0x110>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_OC1_SetConfig+0xc2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <TIM_OC1_SetConfig+0x114>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <TIM_OC1_SetConfig+0xc2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a18      	ldr	r2, [pc, #96]	@ (80031b4 <TIM_OC1_SetConfig+0x118>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_OC1_SetConfig+0xc2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <TIM_OC1_SetConfig+0x11c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d111      	bne.n	8003182 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800316c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40013400 	.word	0x40013400
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800

080031bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f023 0210 	bic.w	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0320 	bic.w	r3, r3, #32
 800320a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a28      	ldr	r2, [pc, #160]	@ (80032bc <TIM_OC2_SetConfig+0x100>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_OC2_SetConfig+0x6c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a27      	ldr	r2, [pc, #156]	@ (80032c0 <TIM_OC2_SetConfig+0x104>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d10d      	bne.n	8003244 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800322e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003242:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a1d      	ldr	r2, [pc, #116]	@ (80032bc <TIM_OC2_SetConfig+0x100>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <TIM_OC2_SetConfig+0xb0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a1c      	ldr	r2, [pc, #112]	@ (80032c0 <TIM_OC2_SetConfig+0x104>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00b      	beq.n	800326c <TIM_OC2_SetConfig+0xb0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <TIM_OC2_SetConfig+0x108>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_OC2_SetConfig+0xb0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a1a      	ldr	r2, [pc, #104]	@ (80032c8 <TIM_OC2_SetConfig+0x10c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_OC2_SetConfig+0xb0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <TIM_OC2_SetConfig+0x110>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d113      	bne.n	8003294 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800327a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40013400 	.word	0x40013400
 80032c4:	40014000 	.word	0x40014000
 80032c8:	40014400 	.word	0x40014400
 80032cc:	40014800 	.word	0x40014800

080032d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800331c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a27      	ldr	r2, [pc, #156]	@ (80033cc <TIM_OC3_SetConfig+0xfc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <TIM_OC3_SetConfig+0x6a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a26      	ldr	r2, [pc, #152]	@ (80033d0 <TIM_OC3_SetConfig+0x100>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10d      	bne.n	8003356 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1c      	ldr	r2, [pc, #112]	@ (80033cc <TIM_OC3_SetConfig+0xfc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00f      	beq.n	800337e <TIM_OC3_SetConfig+0xae>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <TIM_OC3_SetConfig+0x100>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00b      	beq.n	800337e <TIM_OC3_SetConfig+0xae>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a1a      	ldr	r2, [pc, #104]	@ (80033d4 <TIM_OC3_SetConfig+0x104>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <TIM_OC3_SetConfig+0xae>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a19      	ldr	r2, [pc, #100]	@ (80033d8 <TIM_OC3_SetConfig+0x108>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d003      	beq.n	800337e <TIM_OC3_SetConfig+0xae>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a18      	ldr	r2, [pc, #96]	@ (80033dc <TIM_OC3_SetConfig+0x10c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d113      	bne.n	80033a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	621a      	str	r2, [r3, #32]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40013400 	.word	0x40013400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800

080033e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800340e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800342e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	031b      	lsls	r3, r3, #12
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <TIM_OC4_SetConfig+0xc0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00f      	beq.n	8003464 <TIM_OC4_SetConfig+0x84>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <TIM_OC4_SetConfig+0xc4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_OC4_SetConfig+0x84>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a16      	ldr	r2, [pc, #88]	@ (80034a8 <TIM_OC4_SetConfig+0xc8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_OC4_SetConfig+0x84>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a15      	ldr	r2, [pc, #84]	@ (80034ac <TIM_OC4_SetConfig+0xcc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_OC4_SetConfig+0x84>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a14      	ldr	r2, [pc, #80]	@ (80034b0 <TIM_OC4_SetConfig+0xd0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d109      	bne.n	8003478 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800346a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40013400 	.word	0x40013400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800

080034b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80034f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a17      	ldr	r2, [pc, #92]	@ (8003568 <TIM_OC5_SetConfig+0xb4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00f      	beq.n	800352e <TIM_OC5_SetConfig+0x7a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a16      	ldr	r2, [pc, #88]	@ (800356c <TIM_OC5_SetConfig+0xb8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00b      	beq.n	800352e <TIM_OC5_SetConfig+0x7a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a15      	ldr	r2, [pc, #84]	@ (8003570 <TIM_OC5_SetConfig+0xbc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d007      	beq.n	800352e <TIM_OC5_SetConfig+0x7a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <TIM_OC5_SetConfig+0xc0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d003      	beq.n	800352e <TIM_OC5_SetConfig+0x7a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a13      	ldr	r2, [pc, #76]	@ (8003578 <TIM_OC5_SetConfig+0xc4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d109      	bne.n	8003542 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003534:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40013400 	.word	0x40013400
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800

0800357c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	051b      	lsls	r3, r3, #20
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a18      	ldr	r2, [pc, #96]	@ (8003634 <TIM_OC6_SetConfig+0xb8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00f      	beq.n	80035f8 <TIM_OC6_SetConfig+0x7c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a17      	ldr	r2, [pc, #92]	@ (8003638 <TIM_OC6_SetConfig+0xbc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_OC6_SetConfig+0x7c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a16      	ldr	r2, [pc, #88]	@ (800363c <TIM_OC6_SetConfig+0xc0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_OC6_SetConfig+0x7c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <TIM_OC6_SetConfig+0xc4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_OC6_SetConfig+0x7c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a14      	ldr	r2, [pc, #80]	@ (8003644 <TIM_OC6_SetConfig+0xc8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d109      	bne.n	800360c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	029b      	lsls	r3, r3, #10
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40013400 	.word	0x40013400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800

08003648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2201      	movs	r2, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1a      	ldr	r2, [r3, #32]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	43db      	mvns	r3, r3
 800366a:	401a      	ands	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1a      	ldr	r2, [r3, #32]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e040      	b.n	8003726 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fd f9d7 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2224      	movs	r2, #36	@ 0x24
 80036be:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fc33 	bl	8003f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f978 	bl	80039d4 <UART_SetConfig>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e01b      	b.n	8003726 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800370c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fcb2 	bl	8004088 <UART_CheckIdleState>
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b08a      	sub	sp, #40	@ 0x28
 8003732:	af02      	add	r7, sp, #8
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003742:	2b20      	cmp	r3, #32
 8003744:	d177      	bne.n	8003836 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_UART_Transmit+0x24>
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e070      	b.n	8003838 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2221      	movs	r2, #33	@ 0x21
 8003762:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003764:	f7fd fb42 	bl	8000dec <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003782:	d108      	bne.n	8003796 <HAL_UART_Transmit+0x68>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e003      	b.n	800379e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800379e:	e02f      	b.n	8003800 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2200      	movs	r2, #0
 80037a8:	2180      	movs	r1, #128	@ 0x80
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fd14 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e03b      	b.n	8003838 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d2:	b292      	uxth	r2, r2
 80037d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	3302      	adds	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	e007      	b.n	80037ee <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	3301      	adds	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1c9      	bne.n	80037a0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2200      	movs	r2, #0
 8003814:	2140      	movs	r1, #64	@ 0x40
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fcde 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e005      	b.n	8003838 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003856:	2b20      	cmp	r3, #32
 8003858:	f040 80b6 	bne.w	80039c8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_UART_Receive+0x28>
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0ae      	b.n	80039ca <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2222      	movs	r2, #34	@ 0x22
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003882:	f7fd fab3 	bl	8000dec <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d10e      	bne.n	80038c0 <HAL_UART_Receive+0x80>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <HAL_UART_Receive+0x76>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80038b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038b4:	e02d      	b.n	8003912 <HAL_UART_Receive+0xd2>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	22ff      	movs	r2, #255	@ 0xff
 80038ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038be:	e028      	b.n	8003912 <HAL_UART_Receive+0xd2>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10d      	bne.n	80038e4 <HAL_UART_Receive+0xa4>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <HAL_UART_Receive+0x9a>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	22ff      	movs	r2, #255	@ 0xff
 80038d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038d8:	e01b      	b.n	8003912 <HAL_UART_Receive+0xd2>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	227f      	movs	r2, #127	@ 0x7f
 80038de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038e2:	e016      	b.n	8003912 <HAL_UART_Receive+0xd2>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ec:	d10d      	bne.n	800390a <HAL_UART_Receive+0xca>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <HAL_UART_Receive+0xc0>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	227f      	movs	r2, #127	@ 0x7f
 80038fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038fe:	e008      	b.n	8003912 <HAL_UART_Receive+0xd2>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	223f      	movs	r2, #63	@ 0x3f
 8003904:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003908:	e003      	b.n	8003912 <HAL_UART_Receive+0xd2>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003918:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003922:	d108      	bne.n	8003936 <HAL_UART_Receive+0xf6>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d104      	bne.n	8003936 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e003      	b.n	800393e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800393e:	e037      	b.n	80039b0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	2120      	movs	r1, #32
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fc44 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e033      	b.n	80039ca <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10c      	bne.n	8003982 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800396e:	b29a      	uxth	r2, r3
 8003970:	8a7b      	ldrh	r3, [r7, #18]
 8003972:	4013      	ands	r3, r2
 8003974:	b29a      	uxth	r2, r3
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	3302      	adds	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e00d      	b.n	800399e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003988:	b29b      	uxth	r3, r3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	8a7b      	ldrh	r3, [r7, #18]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4013      	ands	r3, r2
 8003992:	b2da      	uxtb	r2, r3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3301      	adds	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1c1      	bne.n	8003940 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d8:	b08a      	sub	sp, #40	@ 0x28
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4ba4      	ldr	r3, [pc, #656]	@ (8003c94 <UART_SetConfig+0x2c0>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a99      	ldr	r2, [pc, #612]	@ (8003c98 <UART_SetConfig+0x2c4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a50:	430a      	orrs	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a90      	ldr	r2, [pc, #576]	@ (8003c9c <UART_SetConfig+0x2c8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d126      	bne.n	8003aac <UART_SetConfig+0xd8>
 8003a5e:	4b90      	ldr	r3, [pc, #576]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d81b      	bhi.n	8003aa4 <UART_SetConfig+0xd0>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <UART_SetConfig+0xa0>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a95 	.word	0x08003a95
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a9d 	.word	0x08003a9d
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8a:	e116      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a92:	e112      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9a:	e10e      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa2:	e10a      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aaa:	e106      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca4 <UART_SetConfig+0x2d0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d138      	bne.n	8003b28 <UART_SetConfig+0x154>
 8003ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	d82d      	bhi.n	8003b20 <UART_SetConfig+0x14c>
 8003ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8003acc <UART_SetConfig+0xf8>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003b01 	.word	0x08003b01
 8003ad0:	08003b21 	.word	0x08003b21
 8003ad4:	08003b21 	.word	0x08003b21
 8003ad8:	08003b21 	.word	0x08003b21
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b21 	.word	0x08003b21
 8003ae4:	08003b21 	.word	0x08003b21
 8003ae8:	08003b21 	.word	0x08003b21
 8003aec:	08003b09 	.word	0x08003b09
 8003af0:	08003b21 	.word	0x08003b21
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b21 	.word	0x08003b21
 8003afc:	08003b19 	.word	0x08003b19
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e0d8      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0e:	e0d4      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b10:	2304      	movs	r3, #4
 8003b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b16:	e0d0      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b18:	2308      	movs	r3, #8
 8003b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1e:	e0cc      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b20:	2310      	movs	r3, #16
 8003b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b26:	e0c8      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca8 <UART_SetConfig+0x2d4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d125      	bne.n	8003b7e <UART_SetConfig+0x1aa>
 8003b32:	4b5b      	ldr	r3, [pc, #364]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b3c:	2b30      	cmp	r3, #48	@ 0x30
 8003b3e:	d016      	beq.n	8003b6e <UART_SetConfig+0x19a>
 8003b40:	2b30      	cmp	r3, #48	@ 0x30
 8003b42:	d818      	bhi.n	8003b76 <UART_SetConfig+0x1a2>
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d00a      	beq.n	8003b5e <UART_SetConfig+0x18a>
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	d814      	bhi.n	8003b76 <UART_SetConfig+0x1a2>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <UART_SetConfig+0x182>
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d008      	beq.n	8003b66 <UART_SetConfig+0x192>
 8003b54:	e00f      	b.n	8003b76 <UART_SetConfig+0x1a2>
 8003b56:	2300      	movs	r3, #0
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5c:	e0ad      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b64:	e0a9      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b66:	2304      	movs	r3, #4
 8003b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6c:	e0a5      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b74:	e0a1      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b76:	2310      	movs	r3, #16
 8003b78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7c:	e09d      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a4a      	ldr	r2, [pc, #296]	@ (8003cac <UART_SetConfig+0x2d8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d125      	bne.n	8003bd4 <UART_SetConfig+0x200>
 8003b88:	4b45      	ldr	r3, [pc, #276]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b92:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b94:	d016      	beq.n	8003bc4 <UART_SetConfig+0x1f0>
 8003b96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b98:	d818      	bhi.n	8003bcc <UART_SetConfig+0x1f8>
 8003b9a:	2b80      	cmp	r3, #128	@ 0x80
 8003b9c:	d00a      	beq.n	8003bb4 <UART_SetConfig+0x1e0>
 8003b9e:	2b80      	cmp	r3, #128	@ 0x80
 8003ba0:	d814      	bhi.n	8003bcc <UART_SetConfig+0x1f8>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <UART_SetConfig+0x1d8>
 8003ba6:	2b40      	cmp	r3, #64	@ 0x40
 8003ba8:	d008      	beq.n	8003bbc <UART_SetConfig+0x1e8>
 8003baa:	e00f      	b.n	8003bcc <UART_SetConfig+0x1f8>
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb2:	e082      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bba:	e07e      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc2:	e07a      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003bc4:	2308      	movs	r3, #8
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bca:	e076      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003bcc:	2310      	movs	r3, #16
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd2:	e072      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a35      	ldr	r2, [pc, #212]	@ (8003cb0 <UART_SetConfig+0x2dc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d12a      	bne.n	8003c34 <UART_SetConfig+0x260>
 8003bde:	4b30      	ldr	r3, [pc, #192]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003be8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bec:	d01a      	beq.n	8003c24 <UART_SetConfig+0x250>
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf2:	d81b      	bhi.n	8003c2c <UART_SetConfig+0x258>
 8003bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf8:	d00c      	beq.n	8003c14 <UART_SetConfig+0x240>
 8003bfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfe:	d815      	bhi.n	8003c2c <UART_SetConfig+0x258>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <UART_SetConfig+0x238>
 8003c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c08:	d008      	beq.n	8003c1c <UART_SetConfig+0x248>
 8003c0a:	e00f      	b.n	8003c2c <UART_SetConfig+0x258>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c12:	e052      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c14:	2302      	movs	r3, #2
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1a:	e04e      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c22:	e04a      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c24:	2308      	movs	r3, #8
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2a:	e046      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c32:	e042      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <UART_SetConfig+0x2c4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d13a      	bne.n	8003cb4 <UART_SetConfig+0x2e0>
 8003c3e:	4b18      	ldr	r3, [pc, #96]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c4c:	d01a      	beq.n	8003c84 <UART_SetConfig+0x2b0>
 8003c4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c52:	d81b      	bhi.n	8003c8c <UART_SetConfig+0x2b8>
 8003c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c58:	d00c      	beq.n	8003c74 <UART_SetConfig+0x2a0>
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c5e:	d815      	bhi.n	8003c8c <UART_SetConfig+0x2b8>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <UART_SetConfig+0x298>
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c68:	d008      	beq.n	8003c7c <UART_SetConfig+0x2a8>
 8003c6a:	e00f      	b.n	8003c8c <UART_SetConfig+0x2b8>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c72:	e022      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c74:	2302      	movs	r3, #2
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7a:	e01e      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c82:	e01a      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c84:	2308      	movs	r3, #8
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8a:	e016      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c92:	e012      	b.n	8003cba <UART_SetConfig+0x2e6>
 8003c94:	efff69f3 	.word	0xefff69f3
 8003c98:	40008000 	.word	0x40008000
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40004400 	.word	0x40004400
 8003ca8:	40004800 	.word	0x40004800
 8003cac:	40004c00 	.word	0x40004c00
 8003cb0:	40005000 	.word	0x40005000
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a9f      	ldr	r2, [pc, #636]	@ (8003f3c <UART_SetConfig+0x568>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d17a      	bne.n	8003dba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d824      	bhi.n	8003d16 <UART_SetConfig+0x342>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <UART_SetConfig+0x300>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003cf9 	.word	0x08003cf9
 8003cd8:	08003d17 	.word	0x08003d17
 8003cdc:	08003d01 	.word	0x08003d01
 8003ce0:	08003d17 	.word	0x08003d17
 8003ce4:	08003d07 	.word	0x08003d07
 8003ce8:	08003d17 	.word	0x08003d17
 8003cec:	08003d17 	.word	0x08003d17
 8003cf0:	08003d17 	.word	0x08003d17
 8003cf4:	08003d0f 	.word	0x08003d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f7fe f8cc 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003cfc:	61f8      	str	r0, [r7, #28]
        break;
 8003cfe:	e010      	b.n	8003d22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d00:	4b8f      	ldr	r3, [pc, #572]	@ (8003f40 <UART_SetConfig+0x56c>)
 8003d02:	61fb      	str	r3, [r7, #28]
        break;
 8003d04:	e00d      	b.n	8003d22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d06:	f7fe f82d 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003d0a:	61f8      	str	r0, [r7, #28]
        break;
 8003d0c:	e009      	b.n	8003d22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d12:	61fb      	str	r3, [r7, #28]
        break;
 8003d14:	e005      	b.n	8003d22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80fb 	beq.w	8003f20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d305      	bcc.n	8003d46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d903      	bls.n	8003d4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d4c:	e0e8      	b.n	8003f20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2200      	movs	r2, #0
 8003d52:	461c      	mov	r4, r3
 8003d54:	4615      	mov	r5, r2
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	022b      	lsls	r3, r5, #8
 8003d60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d64:	0222      	lsls	r2, r4, #8
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	6849      	ldr	r1, [r1, #4]
 8003d6a:	0849      	lsrs	r1, r1, #1
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	4688      	mov	r8, r1
 8003d70:	4681      	mov	r9, r0
 8003d72:	eb12 0a08 	adds.w	sl, r2, r8
 8003d76:	eb43 0b09 	adc.w	fp, r3, r9
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d88:	4650      	mov	r0, sl
 8003d8a:	4659      	mov	r1, fp
 8003d8c:	f7fc fa80 	bl	8000290 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4613      	mov	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d9e:	d308      	bcc.n	8003db2 <UART_SetConfig+0x3de>
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da6:	d204      	bcs.n	8003db2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	60da      	str	r2, [r3, #12]
 8003db0:	e0b6      	b.n	8003f20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003db8:	e0b2      	b.n	8003f20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc2:	d15e      	bne.n	8003e82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d828      	bhi.n	8003e1e <UART_SetConfig+0x44a>
 8003dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <UART_SetConfig+0x400>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e09 	.word	0x08003e09
 8003de0:	08003e1f 	.word	0x08003e1f
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df8:	f7fe f84c 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	61f8      	str	r0, [r7, #28]
        break;
 8003dfe:	e014      	b.n	8003e2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e00:	f7fe f85e 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8003e04:	61f8      	str	r0, [r7, #28]
        break;
 8003e06:	e010      	b.n	8003e2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e08:	4b4d      	ldr	r3, [pc, #308]	@ (8003f40 <UART_SetConfig+0x56c>)
 8003e0a:	61fb      	str	r3, [r7, #28]
        break;
 8003e0c:	e00d      	b.n	8003e2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7fd ffa9 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003e12:	61f8      	str	r0, [r7, #28]
        break;
 8003e14:	e009      	b.n	8003e2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1a:	61fb      	str	r3, [r7, #28]
        break;
 8003e1c:	e005      	b.n	8003e2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d077      	beq.n	8003f20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005a      	lsls	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	441a      	add	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d916      	bls.n	8003e7a <UART_SetConfig+0x4a6>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e52:	d212      	bcs.n	8003e7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f023 030f 	bic.w	r3, r3, #15
 8003e5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	8afb      	ldrh	r3, [r7, #22]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	8afa      	ldrh	r2, [r7, #22]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e052      	b.n	8003f20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e80:	e04e      	b.n	8003f20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d827      	bhi.n	8003eda <UART_SetConfig+0x506>
 8003e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <UART_SetConfig+0x4bc>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003eb5 	.word	0x08003eb5
 8003e94:	08003ebd 	.word	0x08003ebd
 8003e98:	08003ec5 	.word	0x08003ec5
 8003e9c:	08003edb 	.word	0x08003edb
 8003ea0:	08003ecb 	.word	0x08003ecb
 8003ea4:	08003edb 	.word	0x08003edb
 8003ea8:	08003edb 	.word	0x08003edb
 8003eac:	08003edb 	.word	0x08003edb
 8003eb0:	08003ed3 	.word	0x08003ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f7fd ffee 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	61f8      	str	r0, [r7, #28]
        break;
 8003eba:	e014      	b.n	8003ee6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ebc:	f7fe f800 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8003ec0:	61f8      	str	r0, [r7, #28]
        break;
 8003ec2:	e010      	b.n	8003ee6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f40 <UART_SetConfig+0x56c>)
 8003ec6:	61fb      	str	r3, [r7, #28]
        break;
 8003ec8:	e00d      	b.n	8003ee6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eca:	f7fd ff4b 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8003ece:	61f8      	str	r0, [r7, #28]
        break;
 8003ed0:	e009      	b.n	8003ee6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ed6:	61fb      	str	r3, [r7, #28]
        break;
 8003ed8:	e005      	b.n	8003ee6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ee4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d019      	beq.n	8003f20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	085a      	lsrs	r2, r3, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	441a      	add	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b0f      	cmp	r3, #15
 8003f04:	d909      	bls.n	8003f1a <UART_SetConfig+0x546>
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f0c:	d205      	bcs.n	8003f1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e002      	b.n	8003f20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3728      	adds	r7, #40	@ 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40008000 	.word	0x40008000
 8003f40:	00f42400 	.word	0x00f42400

08003f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01a      	beq.n	800405a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004042:	d10a      	bne.n	800405a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  }
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b098      	sub	sp, #96	@ 0x60
 800408c:	af02      	add	r7, sp, #8
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004098:	f7fc fea8 	bl	8000dec <HAL_GetTick>
 800409c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d12e      	bne.n	800410a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b4:	2200      	movs	r2, #0
 80040b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f88c 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d021      	beq.n	800410a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040da:	653b      	str	r3, [r7, #80]	@ 0x50
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e062      	b.n	80041d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d149      	bne.n	80041ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004118:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004120:	2200      	movs	r2, #0
 8004122:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f856 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d03c      	beq.n	80041ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	623b      	str	r3, [r7, #32]
   return(result);
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004150:	633b      	str	r3, [r7, #48]	@ 0x30
 8004152:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	60fb      	str	r3, [r7, #12]
   return(result);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004184:	61fa      	str	r2, [r7, #28]
 8004186:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	617b      	str	r3, [r7, #20]
   return(result);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e011      	b.n	80041d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3758      	adds	r7, #88	@ 0x58
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e8:	e04f      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d04b      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fc fdfb 	bl	8000dec <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <UART_WaitOnFlagUntilTimeout+0x30>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e04e      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	d037      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0xb2>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b80      	cmp	r3, #128	@ 0x80
 800421e:	d034      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b40      	cmp	r3, #64	@ 0x40
 8004224:	d031      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b08      	cmp	r3, #8
 8004232:	d110      	bne.n	8004256 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2208      	movs	r2, #8
 800423a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f838 	bl	80042b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2208      	movs	r2, #8
 8004246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e029      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004264:	d111      	bne.n	800428a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800426e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f81e 	bl	80042b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e00f      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4013      	ands	r3, r2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d0a0      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b095      	sub	sp, #84	@ 0x54
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e6      	bne.n	80042ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800430c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800430e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e5      	bne.n	80042ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004324:	2b01      	cmp	r3, #1
 8004326:	d118      	bne.n	800435a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	60bb      	str	r3, [r7, #8]
   return(result);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f023 0310 	bic.w	r3, r3, #16
 800433c:	647b      	str	r3, [r7, #68]	@ 0x44
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6979      	ldr	r1, [r7, #20]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	613b      	str	r3, [r7, #16]
   return(result);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e6      	bne.n	8004328 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800436e:	bf00      	nop
 8004370:	3754      	adds	r7, #84	@ 0x54
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <atoi>:
 800437a:	220a      	movs	r2, #10
 800437c:	2100      	movs	r1, #0
 800437e:	f000 b87b 	b.w	8004478 <strtol>
	...

08004384 <_strtol_l.constprop.0>:
 8004384:	2b24      	cmp	r3, #36	@ 0x24
 8004386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800438a:	4686      	mov	lr, r0
 800438c:	4690      	mov	r8, r2
 800438e:	d801      	bhi.n	8004394 <_strtol_l.constprop.0+0x10>
 8004390:	2b01      	cmp	r3, #1
 8004392:	d106      	bne.n	80043a2 <_strtol_l.constprop.0+0x1e>
 8004394:	f000 f8a2 	bl	80044dc <__errno>
 8004398:	2316      	movs	r3, #22
 800439a:	6003      	str	r3, [r0, #0]
 800439c:	2000      	movs	r0, #0
 800439e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a2:	4834      	ldr	r0, [pc, #208]	@ (8004474 <_strtol_l.constprop.0+0xf0>)
 80043a4:	460d      	mov	r5, r1
 80043a6:	462a      	mov	r2, r5
 80043a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043ac:	5d06      	ldrb	r6, [r0, r4]
 80043ae:	f016 0608 	ands.w	r6, r6, #8
 80043b2:	d1f8      	bne.n	80043a6 <_strtol_l.constprop.0+0x22>
 80043b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80043b6:	d12d      	bne.n	8004414 <_strtol_l.constprop.0+0x90>
 80043b8:	782c      	ldrb	r4, [r5, #0]
 80043ba:	2601      	movs	r6, #1
 80043bc:	1c95      	adds	r5, r2, #2
 80043be:	f033 0210 	bics.w	r2, r3, #16
 80043c2:	d109      	bne.n	80043d8 <_strtol_l.constprop.0+0x54>
 80043c4:	2c30      	cmp	r4, #48	@ 0x30
 80043c6:	d12a      	bne.n	800441e <_strtol_l.constprop.0+0x9a>
 80043c8:	782a      	ldrb	r2, [r5, #0]
 80043ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80043ce:	2a58      	cmp	r2, #88	@ 0x58
 80043d0:	d125      	bne.n	800441e <_strtol_l.constprop.0+0x9a>
 80043d2:	786c      	ldrb	r4, [r5, #1]
 80043d4:	2310      	movs	r3, #16
 80043d6:	3502      	adds	r5, #2
 80043d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80043dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80043e0:	2200      	movs	r2, #0
 80043e2:	fbbc f9f3 	udiv	r9, ip, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80043ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80043f0:	2f09      	cmp	r7, #9
 80043f2:	d81b      	bhi.n	800442c <_strtol_l.constprop.0+0xa8>
 80043f4:	463c      	mov	r4, r7
 80043f6:	42a3      	cmp	r3, r4
 80043f8:	dd27      	ble.n	800444a <_strtol_l.constprop.0+0xc6>
 80043fa:	1c57      	adds	r7, r2, #1
 80043fc:	d007      	beq.n	800440e <_strtol_l.constprop.0+0x8a>
 80043fe:	4581      	cmp	r9, r0
 8004400:	d320      	bcc.n	8004444 <_strtol_l.constprop.0+0xc0>
 8004402:	d101      	bne.n	8004408 <_strtol_l.constprop.0+0x84>
 8004404:	45a2      	cmp	sl, r4
 8004406:	db1d      	blt.n	8004444 <_strtol_l.constprop.0+0xc0>
 8004408:	fb00 4003 	mla	r0, r0, r3, r4
 800440c:	2201      	movs	r2, #1
 800440e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004412:	e7eb      	b.n	80043ec <_strtol_l.constprop.0+0x68>
 8004414:	2c2b      	cmp	r4, #43	@ 0x2b
 8004416:	bf04      	itt	eq
 8004418:	782c      	ldrbeq	r4, [r5, #0]
 800441a:	1c95      	addeq	r5, r2, #2
 800441c:	e7cf      	b.n	80043be <_strtol_l.constprop.0+0x3a>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1da      	bne.n	80043d8 <_strtol_l.constprop.0+0x54>
 8004422:	2c30      	cmp	r4, #48	@ 0x30
 8004424:	bf0c      	ite	eq
 8004426:	2308      	moveq	r3, #8
 8004428:	230a      	movne	r3, #10
 800442a:	e7d5      	b.n	80043d8 <_strtol_l.constprop.0+0x54>
 800442c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004430:	2f19      	cmp	r7, #25
 8004432:	d801      	bhi.n	8004438 <_strtol_l.constprop.0+0xb4>
 8004434:	3c37      	subs	r4, #55	@ 0x37
 8004436:	e7de      	b.n	80043f6 <_strtol_l.constprop.0+0x72>
 8004438:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800443c:	2f19      	cmp	r7, #25
 800443e:	d804      	bhi.n	800444a <_strtol_l.constprop.0+0xc6>
 8004440:	3c57      	subs	r4, #87	@ 0x57
 8004442:	e7d8      	b.n	80043f6 <_strtol_l.constprop.0+0x72>
 8004444:	f04f 32ff 	mov.w	r2, #4294967295
 8004448:	e7e1      	b.n	800440e <_strtol_l.constprop.0+0x8a>
 800444a:	1c53      	adds	r3, r2, #1
 800444c:	d108      	bne.n	8004460 <_strtol_l.constprop.0+0xdc>
 800444e:	2322      	movs	r3, #34	@ 0x22
 8004450:	f8ce 3000 	str.w	r3, [lr]
 8004454:	4660      	mov	r0, ip
 8004456:	f1b8 0f00 	cmp.w	r8, #0
 800445a:	d0a0      	beq.n	800439e <_strtol_l.constprop.0+0x1a>
 800445c:	1e69      	subs	r1, r5, #1
 800445e:	e006      	b.n	800446e <_strtol_l.constprop.0+0xea>
 8004460:	b106      	cbz	r6, 8004464 <_strtol_l.constprop.0+0xe0>
 8004462:	4240      	negs	r0, r0
 8004464:	f1b8 0f00 	cmp.w	r8, #0
 8004468:	d099      	beq.n	800439e <_strtol_l.constprop.0+0x1a>
 800446a:	2a00      	cmp	r2, #0
 800446c:	d1f6      	bne.n	800445c <_strtol_l.constprop.0+0xd8>
 800446e:	f8c8 1000 	str.w	r1, [r8]
 8004472:	e794      	b.n	800439e <_strtol_l.constprop.0+0x1a>
 8004474:	08004ee1 	.word	0x08004ee1

08004478 <strtol>:
 8004478:	4613      	mov	r3, r2
 800447a:	460a      	mov	r2, r1
 800447c:	4601      	mov	r1, r0
 800447e:	4802      	ldr	r0, [pc, #8]	@ (8004488 <strtol+0x10>)
 8004480:	6800      	ldr	r0, [r0, #0]
 8004482:	f7ff bf7f 	b.w	8004384 <_strtol_l.constprop.0>
 8004486:	bf00      	nop
 8004488:	2000000c 	.word	0x2000000c

0800448c <siprintf>:
 800448c:	b40e      	push	{r1, r2, r3}
 800448e:	b500      	push	{lr}
 8004490:	b09c      	sub	sp, #112	@ 0x70
 8004492:	ab1d      	add	r3, sp, #116	@ 0x74
 8004494:	9002      	str	r0, [sp, #8]
 8004496:	9006      	str	r0, [sp, #24]
 8004498:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800449c:	4809      	ldr	r0, [pc, #36]	@ (80044c4 <siprintf+0x38>)
 800449e:	9107      	str	r1, [sp, #28]
 80044a0:	9104      	str	r1, [sp, #16]
 80044a2:	4909      	ldr	r1, [pc, #36]	@ (80044c8 <siprintf+0x3c>)
 80044a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80044a8:	9105      	str	r1, [sp, #20]
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	a902      	add	r1, sp, #8
 80044b0:	f000 f994 	bl	80047dc <_svfiprintf_r>
 80044b4:	9b02      	ldr	r3, [sp, #8]
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	b01c      	add	sp, #112	@ 0x70
 80044bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c0:	b003      	add	sp, #12
 80044c2:	4770      	bx	lr
 80044c4:	2000000c 	.word	0x2000000c
 80044c8:	ffff0208 	.word	0xffff0208

080044cc <memset>:
 80044cc:	4402      	add	r2, r0
 80044ce:	4603      	mov	r3, r0
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d100      	bne.n	80044d6 <memset+0xa>
 80044d4:	4770      	bx	lr
 80044d6:	f803 1b01 	strb.w	r1, [r3], #1
 80044da:	e7f9      	b.n	80044d0 <memset+0x4>

080044dc <__errno>:
 80044dc:	4b01      	ldr	r3, [pc, #4]	@ (80044e4 <__errno+0x8>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	2000000c 	.word	0x2000000c

080044e8 <__libc_init_array>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004520 <__libc_init_array+0x38>)
 80044ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004524 <__libc_init_array+0x3c>)
 80044ee:	1b64      	subs	r4, r4, r5
 80044f0:	10a4      	asrs	r4, r4, #2
 80044f2:	2600      	movs	r6, #0
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	d109      	bne.n	800450c <__libc_init_array+0x24>
 80044f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004528 <__libc_init_array+0x40>)
 80044fa:	4c0c      	ldr	r4, [pc, #48]	@ (800452c <__libc_init_array+0x44>)
 80044fc:	f000 fc66 	bl	8004dcc <_init>
 8004500:	1b64      	subs	r4, r4, r5
 8004502:	10a4      	asrs	r4, r4, #2
 8004504:	2600      	movs	r6, #0
 8004506:	42a6      	cmp	r6, r4
 8004508:	d105      	bne.n	8004516 <__libc_init_array+0x2e>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004510:	4798      	blx	r3
 8004512:	3601      	adds	r6, #1
 8004514:	e7ee      	b.n	80044f4 <__libc_init_array+0xc>
 8004516:	f855 3b04 	ldr.w	r3, [r5], #4
 800451a:	4798      	blx	r3
 800451c:	3601      	adds	r6, #1
 800451e:	e7f2      	b.n	8004506 <__libc_init_array+0x1e>
 8004520:	0800501c 	.word	0x0800501c
 8004524:	0800501c 	.word	0x0800501c
 8004528:	0800501c 	.word	0x0800501c
 800452c:	08005020 	.word	0x08005020

08004530 <__retarget_lock_acquire_recursive>:
 8004530:	4770      	bx	lr

08004532 <__retarget_lock_release_recursive>:
 8004532:	4770      	bx	lr

08004534 <_free_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4605      	mov	r5, r0
 8004538:	2900      	cmp	r1, #0
 800453a:	d041      	beq.n	80045c0 <_free_r+0x8c>
 800453c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004540:	1f0c      	subs	r4, r1, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	bfb8      	it	lt
 8004546:	18e4      	addlt	r4, r4, r3
 8004548:	f000 f8e0 	bl	800470c <__malloc_lock>
 800454c:	4a1d      	ldr	r2, [pc, #116]	@ (80045c4 <_free_r+0x90>)
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	b933      	cbnz	r3, 8004560 <_free_r+0x2c>
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	6014      	str	r4, [r2, #0]
 8004556:	4628      	mov	r0, r5
 8004558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800455c:	f000 b8dc 	b.w	8004718 <__malloc_unlock>
 8004560:	42a3      	cmp	r3, r4
 8004562:	d908      	bls.n	8004576 <_free_r+0x42>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	1821      	adds	r1, r4, r0
 8004568:	428b      	cmp	r3, r1
 800456a:	bf01      	itttt	eq
 800456c:	6819      	ldreq	r1, [r3, #0]
 800456e:	685b      	ldreq	r3, [r3, #4]
 8004570:	1809      	addeq	r1, r1, r0
 8004572:	6021      	streq	r1, [r4, #0]
 8004574:	e7ed      	b.n	8004552 <_free_r+0x1e>
 8004576:	461a      	mov	r2, r3
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	b10b      	cbz	r3, 8004580 <_free_r+0x4c>
 800457c:	42a3      	cmp	r3, r4
 800457e:	d9fa      	bls.n	8004576 <_free_r+0x42>
 8004580:	6811      	ldr	r1, [r2, #0]
 8004582:	1850      	adds	r0, r2, r1
 8004584:	42a0      	cmp	r0, r4
 8004586:	d10b      	bne.n	80045a0 <_free_r+0x6c>
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	4401      	add	r1, r0
 800458c:	1850      	adds	r0, r2, r1
 800458e:	4283      	cmp	r3, r0
 8004590:	6011      	str	r1, [r2, #0]
 8004592:	d1e0      	bne.n	8004556 <_free_r+0x22>
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	6053      	str	r3, [r2, #4]
 800459a:	4408      	add	r0, r1
 800459c:	6010      	str	r0, [r2, #0]
 800459e:	e7da      	b.n	8004556 <_free_r+0x22>
 80045a0:	d902      	bls.n	80045a8 <_free_r+0x74>
 80045a2:	230c      	movs	r3, #12
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	e7d6      	b.n	8004556 <_free_r+0x22>
 80045a8:	6820      	ldr	r0, [r4, #0]
 80045aa:	1821      	adds	r1, r4, r0
 80045ac:	428b      	cmp	r3, r1
 80045ae:	bf04      	itt	eq
 80045b0:	6819      	ldreq	r1, [r3, #0]
 80045b2:	685b      	ldreq	r3, [r3, #4]
 80045b4:	6063      	str	r3, [r4, #4]
 80045b6:	bf04      	itt	eq
 80045b8:	1809      	addeq	r1, r1, r0
 80045ba:	6021      	streq	r1, [r4, #0]
 80045bc:	6054      	str	r4, [r2, #4]
 80045be:	e7ca      	b.n	8004556 <_free_r+0x22>
 80045c0:	bd38      	pop	{r3, r4, r5, pc}
 80045c2:	bf00      	nop
 80045c4:	2000031c 	.word	0x2000031c

080045c8 <sbrk_aligned>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004608 <sbrk_aligned+0x40>)
 80045cc:	460c      	mov	r4, r1
 80045ce:	6831      	ldr	r1, [r6, #0]
 80045d0:	4605      	mov	r5, r0
 80045d2:	b911      	cbnz	r1, 80045da <sbrk_aligned+0x12>
 80045d4:	f000 fba6 	bl	8004d24 <_sbrk_r>
 80045d8:	6030      	str	r0, [r6, #0]
 80045da:	4621      	mov	r1, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	f000 fba1 	bl	8004d24 <_sbrk_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	d103      	bne.n	80045ee <sbrk_aligned+0x26>
 80045e6:	f04f 34ff 	mov.w	r4, #4294967295
 80045ea:	4620      	mov	r0, r4
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
 80045ee:	1cc4      	adds	r4, r0, #3
 80045f0:	f024 0403 	bic.w	r4, r4, #3
 80045f4:	42a0      	cmp	r0, r4
 80045f6:	d0f8      	beq.n	80045ea <sbrk_aligned+0x22>
 80045f8:	1a21      	subs	r1, r4, r0
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 fb92 	bl	8004d24 <_sbrk_r>
 8004600:	3001      	adds	r0, #1
 8004602:	d1f2      	bne.n	80045ea <sbrk_aligned+0x22>
 8004604:	e7ef      	b.n	80045e6 <sbrk_aligned+0x1e>
 8004606:	bf00      	nop
 8004608:	20000318 	.word	0x20000318

0800460c <_malloc_r>:
 800460c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004610:	1ccd      	adds	r5, r1, #3
 8004612:	f025 0503 	bic.w	r5, r5, #3
 8004616:	3508      	adds	r5, #8
 8004618:	2d0c      	cmp	r5, #12
 800461a:	bf38      	it	cc
 800461c:	250c      	movcc	r5, #12
 800461e:	2d00      	cmp	r5, #0
 8004620:	4606      	mov	r6, r0
 8004622:	db01      	blt.n	8004628 <_malloc_r+0x1c>
 8004624:	42a9      	cmp	r1, r5
 8004626:	d904      	bls.n	8004632 <_malloc_r+0x26>
 8004628:	230c      	movs	r3, #12
 800462a:	6033      	str	r3, [r6, #0]
 800462c:	2000      	movs	r0, #0
 800462e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004708 <_malloc_r+0xfc>
 8004636:	f000 f869 	bl	800470c <__malloc_lock>
 800463a:	f8d8 3000 	ldr.w	r3, [r8]
 800463e:	461c      	mov	r4, r3
 8004640:	bb44      	cbnz	r4, 8004694 <_malloc_r+0x88>
 8004642:	4629      	mov	r1, r5
 8004644:	4630      	mov	r0, r6
 8004646:	f7ff ffbf 	bl	80045c8 <sbrk_aligned>
 800464a:	1c43      	adds	r3, r0, #1
 800464c:	4604      	mov	r4, r0
 800464e:	d158      	bne.n	8004702 <_malloc_r+0xf6>
 8004650:	f8d8 4000 	ldr.w	r4, [r8]
 8004654:	4627      	mov	r7, r4
 8004656:	2f00      	cmp	r7, #0
 8004658:	d143      	bne.n	80046e2 <_malloc_r+0xd6>
 800465a:	2c00      	cmp	r4, #0
 800465c:	d04b      	beq.n	80046f6 <_malloc_r+0xea>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	4639      	mov	r1, r7
 8004662:	4630      	mov	r0, r6
 8004664:	eb04 0903 	add.w	r9, r4, r3
 8004668:	f000 fb5c 	bl	8004d24 <_sbrk_r>
 800466c:	4581      	cmp	r9, r0
 800466e:	d142      	bne.n	80046f6 <_malloc_r+0xea>
 8004670:	6821      	ldr	r1, [r4, #0]
 8004672:	1a6d      	subs	r5, r5, r1
 8004674:	4629      	mov	r1, r5
 8004676:	4630      	mov	r0, r6
 8004678:	f7ff ffa6 	bl	80045c8 <sbrk_aligned>
 800467c:	3001      	adds	r0, #1
 800467e:	d03a      	beq.n	80046f6 <_malloc_r+0xea>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	442b      	add	r3, r5
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	f8d8 3000 	ldr.w	r3, [r8]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	bb62      	cbnz	r2, 80046e8 <_malloc_r+0xdc>
 800468e:	f8c8 7000 	str.w	r7, [r8]
 8004692:	e00f      	b.n	80046b4 <_malloc_r+0xa8>
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	1b52      	subs	r2, r2, r5
 8004698:	d420      	bmi.n	80046dc <_malloc_r+0xd0>
 800469a:	2a0b      	cmp	r2, #11
 800469c:	d917      	bls.n	80046ce <_malloc_r+0xc2>
 800469e:	1961      	adds	r1, r4, r5
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	6025      	str	r5, [r4, #0]
 80046a4:	bf18      	it	ne
 80046a6:	6059      	strne	r1, [r3, #4]
 80046a8:	6863      	ldr	r3, [r4, #4]
 80046aa:	bf08      	it	eq
 80046ac:	f8c8 1000 	streq.w	r1, [r8]
 80046b0:	5162      	str	r2, [r4, r5]
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 f82f 	bl	8004718 <__malloc_unlock>
 80046ba:	f104 000b 	add.w	r0, r4, #11
 80046be:	1d23      	adds	r3, r4, #4
 80046c0:	f020 0007 	bic.w	r0, r0, #7
 80046c4:	1ac2      	subs	r2, r0, r3
 80046c6:	bf1c      	itt	ne
 80046c8:	1a1b      	subne	r3, r3, r0
 80046ca:	50a3      	strne	r3, [r4, r2]
 80046cc:	e7af      	b.n	800462e <_malloc_r+0x22>
 80046ce:	6862      	ldr	r2, [r4, #4]
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	bf0c      	ite	eq
 80046d4:	f8c8 2000 	streq.w	r2, [r8]
 80046d8:	605a      	strne	r2, [r3, #4]
 80046da:	e7eb      	b.n	80046b4 <_malloc_r+0xa8>
 80046dc:	4623      	mov	r3, r4
 80046de:	6864      	ldr	r4, [r4, #4]
 80046e0:	e7ae      	b.n	8004640 <_malloc_r+0x34>
 80046e2:	463c      	mov	r4, r7
 80046e4:	687f      	ldr	r7, [r7, #4]
 80046e6:	e7b6      	b.n	8004656 <_malloc_r+0x4a>
 80046e8:	461a      	mov	r2, r3
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d1fb      	bne.n	80046e8 <_malloc_r+0xdc>
 80046f0:	2300      	movs	r3, #0
 80046f2:	6053      	str	r3, [r2, #4]
 80046f4:	e7de      	b.n	80046b4 <_malloc_r+0xa8>
 80046f6:	230c      	movs	r3, #12
 80046f8:	6033      	str	r3, [r6, #0]
 80046fa:	4630      	mov	r0, r6
 80046fc:	f000 f80c 	bl	8004718 <__malloc_unlock>
 8004700:	e794      	b.n	800462c <_malloc_r+0x20>
 8004702:	6005      	str	r5, [r0, #0]
 8004704:	e7d6      	b.n	80046b4 <_malloc_r+0xa8>
 8004706:	bf00      	nop
 8004708:	2000031c 	.word	0x2000031c

0800470c <__malloc_lock>:
 800470c:	4801      	ldr	r0, [pc, #4]	@ (8004714 <__malloc_lock+0x8>)
 800470e:	f7ff bf0f 	b.w	8004530 <__retarget_lock_acquire_recursive>
 8004712:	bf00      	nop
 8004714:	20000314 	.word	0x20000314

08004718 <__malloc_unlock>:
 8004718:	4801      	ldr	r0, [pc, #4]	@ (8004720 <__malloc_unlock+0x8>)
 800471a:	f7ff bf0a 	b.w	8004532 <__retarget_lock_release_recursive>
 800471e:	bf00      	nop
 8004720:	20000314 	.word	0x20000314

08004724 <__ssputs_r>:
 8004724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004728:	688e      	ldr	r6, [r1, #8]
 800472a:	461f      	mov	r7, r3
 800472c:	42be      	cmp	r6, r7
 800472e:	680b      	ldr	r3, [r1, #0]
 8004730:	4682      	mov	sl, r0
 8004732:	460c      	mov	r4, r1
 8004734:	4690      	mov	r8, r2
 8004736:	d82d      	bhi.n	8004794 <__ssputs_r+0x70>
 8004738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800473c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004740:	d026      	beq.n	8004790 <__ssputs_r+0x6c>
 8004742:	6965      	ldr	r5, [r4, #20]
 8004744:	6909      	ldr	r1, [r1, #16]
 8004746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800474a:	eba3 0901 	sub.w	r9, r3, r1
 800474e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004752:	1c7b      	adds	r3, r7, #1
 8004754:	444b      	add	r3, r9
 8004756:	106d      	asrs	r5, r5, #1
 8004758:	429d      	cmp	r5, r3
 800475a:	bf38      	it	cc
 800475c:	461d      	movcc	r5, r3
 800475e:	0553      	lsls	r3, r2, #21
 8004760:	d527      	bpl.n	80047b2 <__ssputs_r+0x8e>
 8004762:	4629      	mov	r1, r5
 8004764:	f7ff ff52 	bl	800460c <_malloc_r>
 8004768:	4606      	mov	r6, r0
 800476a:	b360      	cbz	r0, 80047c6 <__ssputs_r+0xa2>
 800476c:	6921      	ldr	r1, [r4, #16]
 800476e:	464a      	mov	r2, r9
 8004770:	f000 fae8 	bl	8004d44 <memcpy>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800477a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	6126      	str	r6, [r4, #16]
 8004782:	6165      	str	r5, [r4, #20]
 8004784:	444e      	add	r6, r9
 8004786:	eba5 0509 	sub.w	r5, r5, r9
 800478a:	6026      	str	r6, [r4, #0]
 800478c:	60a5      	str	r5, [r4, #8]
 800478e:	463e      	mov	r6, r7
 8004790:	42be      	cmp	r6, r7
 8004792:	d900      	bls.n	8004796 <__ssputs_r+0x72>
 8004794:	463e      	mov	r6, r7
 8004796:	6820      	ldr	r0, [r4, #0]
 8004798:	4632      	mov	r2, r6
 800479a:	4641      	mov	r1, r8
 800479c:	f000 faa8 	bl	8004cf0 <memmove>
 80047a0:	68a3      	ldr	r3, [r4, #8]
 80047a2:	1b9b      	subs	r3, r3, r6
 80047a4:	60a3      	str	r3, [r4, #8]
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	4433      	add	r3, r6
 80047aa:	6023      	str	r3, [r4, #0]
 80047ac:	2000      	movs	r0, #0
 80047ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b2:	462a      	mov	r2, r5
 80047b4:	f000 fad4 	bl	8004d60 <_realloc_r>
 80047b8:	4606      	mov	r6, r0
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d1e0      	bne.n	8004780 <__ssputs_r+0x5c>
 80047be:	6921      	ldr	r1, [r4, #16]
 80047c0:	4650      	mov	r0, sl
 80047c2:	f7ff feb7 	bl	8004534 <_free_r>
 80047c6:	230c      	movs	r3, #12
 80047c8:	f8ca 3000 	str.w	r3, [sl]
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	e7e9      	b.n	80047ae <__ssputs_r+0x8a>
	...

080047dc <_svfiprintf_r>:
 80047dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e0:	4698      	mov	r8, r3
 80047e2:	898b      	ldrh	r3, [r1, #12]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	b09d      	sub	sp, #116	@ 0x74
 80047e8:	4607      	mov	r7, r0
 80047ea:	460d      	mov	r5, r1
 80047ec:	4614      	mov	r4, r2
 80047ee:	d510      	bpl.n	8004812 <_svfiprintf_r+0x36>
 80047f0:	690b      	ldr	r3, [r1, #16]
 80047f2:	b973      	cbnz	r3, 8004812 <_svfiprintf_r+0x36>
 80047f4:	2140      	movs	r1, #64	@ 0x40
 80047f6:	f7ff ff09 	bl	800460c <_malloc_r>
 80047fa:	6028      	str	r0, [r5, #0]
 80047fc:	6128      	str	r0, [r5, #16]
 80047fe:	b930      	cbnz	r0, 800480e <_svfiprintf_r+0x32>
 8004800:	230c      	movs	r3, #12
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	b01d      	add	sp, #116	@ 0x74
 800480a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480e:	2340      	movs	r3, #64	@ 0x40
 8004810:	616b      	str	r3, [r5, #20]
 8004812:	2300      	movs	r3, #0
 8004814:	9309      	str	r3, [sp, #36]	@ 0x24
 8004816:	2320      	movs	r3, #32
 8004818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800481c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004820:	2330      	movs	r3, #48	@ 0x30
 8004822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80049c0 <_svfiprintf_r+0x1e4>
 8004826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800482a:	f04f 0901 	mov.w	r9, #1
 800482e:	4623      	mov	r3, r4
 8004830:	469a      	mov	sl, r3
 8004832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004836:	b10a      	cbz	r2, 800483c <_svfiprintf_r+0x60>
 8004838:	2a25      	cmp	r2, #37	@ 0x25
 800483a:	d1f9      	bne.n	8004830 <_svfiprintf_r+0x54>
 800483c:	ebba 0b04 	subs.w	fp, sl, r4
 8004840:	d00b      	beq.n	800485a <_svfiprintf_r+0x7e>
 8004842:	465b      	mov	r3, fp
 8004844:	4622      	mov	r2, r4
 8004846:	4629      	mov	r1, r5
 8004848:	4638      	mov	r0, r7
 800484a:	f7ff ff6b 	bl	8004724 <__ssputs_r>
 800484e:	3001      	adds	r0, #1
 8004850:	f000 80a7 	beq.w	80049a2 <_svfiprintf_r+0x1c6>
 8004854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004856:	445a      	add	r2, fp
 8004858:	9209      	str	r2, [sp, #36]	@ 0x24
 800485a:	f89a 3000 	ldrb.w	r3, [sl]
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 809f 	beq.w	80049a2 <_svfiprintf_r+0x1c6>
 8004864:	2300      	movs	r3, #0
 8004866:	f04f 32ff 	mov.w	r2, #4294967295
 800486a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800486e:	f10a 0a01 	add.w	sl, sl, #1
 8004872:	9304      	str	r3, [sp, #16]
 8004874:	9307      	str	r3, [sp, #28]
 8004876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800487a:	931a      	str	r3, [sp, #104]	@ 0x68
 800487c:	4654      	mov	r4, sl
 800487e:	2205      	movs	r2, #5
 8004880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004884:	484e      	ldr	r0, [pc, #312]	@ (80049c0 <_svfiprintf_r+0x1e4>)
 8004886:	f7fb fcb3 	bl	80001f0 <memchr>
 800488a:	9a04      	ldr	r2, [sp, #16]
 800488c:	b9d8      	cbnz	r0, 80048c6 <_svfiprintf_r+0xea>
 800488e:	06d0      	lsls	r0, r2, #27
 8004890:	bf44      	itt	mi
 8004892:	2320      	movmi	r3, #32
 8004894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004898:	0711      	lsls	r1, r2, #28
 800489a:	bf44      	itt	mi
 800489c:	232b      	movmi	r3, #43	@ 0x2b
 800489e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048a2:	f89a 3000 	ldrb.w	r3, [sl]
 80048a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80048a8:	d015      	beq.n	80048d6 <_svfiprintf_r+0xfa>
 80048aa:	9a07      	ldr	r2, [sp, #28]
 80048ac:	4654      	mov	r4, sl
 80048ae:	2000      	movs	r0, #0
 80048b0:	f04f 0c0a 	mov.w	ip, #10
 80048b4:	4621      	mov	r1, r4
 80048b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ba:	3b30      	subs	r3, #48	@ 0x30
 80048bc:	2b09      	cmp	r3, #9
 80048be:	d94b      	bls.n	8004958 <_svfiprintf_r+0x17c>
 80048c0:	b1b0      	cbz	r0, 80048f0 <_svfiprintf_r+0x114>
 80048c2:	9207      	str	r2, [sp, #28]
 80048c4:	e014      	b.n	80048f0 <_svfiprintf_r+0x114>
 80048c6:	eba0 0308 	sub.w	r3, r0, r8
 80048ca:	fa09 f303 	lsl.w	r3, r9, r3
 80048ce:	4313      	orrs	r3, r2
 80048d0:	9304      	str	r3, [sp, #16]
 80048d2:	46a2      	mov	sl, r4
 80048d4:	e7d2      	b.n	800487c <_svfiprintf_r+0xa0>
 80048d6:	9b03      	ldr	r3, [sp, #12]
 80048d8:	1d19      	adds	r1, r3, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	9103      	str	r1, [sp, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bfbb      	ittet	lt
 80048e2:	425b      	neglt	r3, r3
 80048e4:	f042 0202 	orrlt.w	r2, r2, #2
 80048e8:	9307      	strge	r3, [sp, #28]
 80048ea:	9307      	strlt	r3, [sp, #28]
 80048ec:	bfb8      	it	lt
 80048ee:	9204      	strlt	r2, [sp, #16]
 80048f0:	7823      	ldrb	r3, [r4, #0]
 80048f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80048f4:	d10a      	bne.n	800490c <_svfiprintf_r+0x130>
 80048f6:	7863      	ldrb	r3, [r4, #1]
 80048f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80048fa:	d132      	bne.n	8004962 <_svfiprintf_r+0x186>
 80048fc:	9b03      	ldr	r3, [sp, #12]
 80048fe:	1d1a      	adds	r2, r3, #4
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	9203      	str	r2, [sp, #12]
 8004904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004908:	3402      	adds	r4, #2
 800490a:	9305      	str	r3, [sp, #20]
 800490c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049d0 <_svfiprintf_r+0x1f4>
 8004910:	7821      	ldrb	r1, [r4, #0]
 8004912:	2203      	movs	r2, #3
 8004914:	4650      	mov	r0, sl
 8004916:	f7fb fc6b 	bl	80001f0 <memchr>
 800491a:	b138      	cbz	r0, 800492c <_svfiprintf_r+0x150>
 800491c:	9b04      	ldr	r3, [sp, #16]
 800491e:	eba0 000a 	sub.w	r0, r0, sl
 8004922:	2240      	movs	r2, #64	@ 0x40
 8004924:	4082      	lsls	r2, r0
 8004926:	4313      	orrs	r3, r2
 8004928:	3401      	adds	r4, #1
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004930:	4824      	ldr	r0, [pc, #144]	@ (80049c4 <_svfiprintf_r+0x1e8>)
 8004932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004936:	2206      	movs	r2, #6
 8004938:	f7fb fc5a 	bl	80001f0 <memchr>
 800493c:	2800      	cmp	r0, #0
 800493e:	d036      	beq.n	80049ae <_svfiprintf_r+0x1d2>
 8004940:	4b21      	ldr	r3, [pc, #132]	@ (80049c8 <_svfiprintf_r+0x1ec>)
 8004942:	bb1b      	cbnz	r3, 800498c <_svfiprintf_r+0x1b0>
 8004944:	9b03      	ldr	r3, [sp, #12]
 8004946:	3307      	adds	r3, #7
 8004948:	f023 0307 	bic.w	r3, r3, #7
 800494c:	3308      	adds	r3, #8
 800494e:	9303      	str	r3, [sp, #12]
 8004950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004952:	4433      	add	r3, r6
 8004954:	9309      	str	r3, [sp, #36]	@ 0x24
 8004956:	e76a      	b.n	800482e <_svfiprintf_r+0x52>
 8004958:	fb0c 3202 	mla	r2, ip, r2, r3
 800495c:	460c      	mov	r4, r1
 800495e:	2001      	movs	r0, #1
 8004960:	e7a8      	b.n	80048b4 <_svfiprintf_r+0xd8>
 8004962:	2300      	movs	r3, #0
 8004964:	3401      	adds	r4, #1
 8004966:	9305      	str	r3, [sp, #20]
 8004968:	4619      	mov	r1, r3
 800496a:	f04f 0c0a 	mov.w	ip, #10
 800496e:	4620      	mov	r0, r4
 8004970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004974:	3a30      	subs	r2, #48	@ 0x30
 8004976:	2a09      	cmp	r2, #9
 8004978:	d903      	bls.n	8004982 <_svfiprintf_r+0x1a6>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0c6      	beq.n	800490c <_svfiprintf_r+0x130>
 800497e:	9105      	str	r1, [sp, #20]
 8004980:	e7c4      	b.n	800490c <_svfiprintf_r+0x130>
 8004982:	fb0c 2101 	mla	r1, ip, r1, r2
 8004986:	4604      	mov	r4, r0
 8004988:	2301      	movs	r3, #1
 800498a:	e7f0      	b.n	800496e <_svfiprintf_r+0x192>
 800498c:	ab03      	add	r3, sp, #12
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	462a      	mov	r2, r5
 8004992:	4b0e      	ldr	r3, [pc, #56]	@ (80049cc <_svfiprintf_r+0x1f0>)
 8004994:	a904      	add	r1, sp, #16
 8004996:	4638      	mov	r0, r7
 8004998:	f3af 8000 	nop.w
 800499c:	1c42      	adds	r2, r0, #1
 800499e:	4606      	mov	r6, r0
 80049a0:	d1d6      	bne.n	8004950 <_svfiprintf_r+0x174>
 80049a2:	89ab      	ldrh	r3, [r5, #12]
 80049a4:	065b      	lsls	r3, r3, #25
 80049a6:	f53f af2d 	bmi.w	8004804 <_svfiprintf_r+0x28>
 80049aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049ac:	e72c      	b.n	8004808 <_svfiprintf_r+0x2c>
 80049ae:	ab03      	add	r3, sp, #12
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	462a      	mov	r2, r5
 80049b4:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <_svfiprintf_r+0x1f0>)
 80049b6:	a904      	add	r1, sp, #16
 80049b8:	4638      	mov	r0, r7
 80049ba:	f000 f879 	bl	8004ab0 <_printf_i>
 80049be:	e7ed      	b.n	800499c <_svfiprintf_r+0x1c0>
 80049c0:	08004fe1 	.word	0x08004fe1
 80049c4:	08004feb 	.word	0x08004feb
 80049c8:	00000000 	.word	0x00000000
 80049cc:	08004725 	.word	0x08004725
 80049d0:	08004fe7 	.word	0x08004fe7

080049d4 <_printf_common>:
 80049d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	4616      	mov	r6, r2
 80049da:	4698      	mov	r8, r3
 80049dc:	688a      	ldr	r2, [r1, #8]
 80049de:	690b      	ldr	r3, [r1, #16]
 80049e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049e4:	4293      	cmp	r3, r2
 80049e6:	bfb8      	it	lt
 80049e8:	4613      	movlt	r3, r2
 80049ea:	6033      	str	r3, [r6, #0]
 80049ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049f0:	4607      	mov	r7, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	b10a      	cbz	r2, 80049fa <_printf_common+0x26>
 80049f6:	3301      	adds	r3, #1
 80049f8:	6033      	str	r3, [r6, #0]
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	0699      	lsls	r1, r3, #26
 80049fe:	bf42      	ittt	mi
 8004a00:	6833      	ldrmi	r3, [r6, #0]
 8004a02:	3302      	addmi	r3, #2
 8004a04:	6033      	strmi	r3, [r6, #0]
 8004a06:	6825      	ldr	r5, [r4, #0]
 8004a08:	f015 0506 	ands.w	r5, r5, #6
 8004a0c:	d106      	bne.n	8004a1c <_printf_common+0x48>
 8004a0e:	f104 0a19 	add.w	sl, r4, #25
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	6832      	ldr	r2, [r6, #0]
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	42ab      	cmp	r3, r5
 8004a1a:	dc26      	bgt.n	8004a6a <_printf_common+0x96>
 8004a1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a20:	6822      	ldr	r2, [r4, #0]
 8004a22:	3b00      	subs	r3, #0
 8004a24:	bf18      	it	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	0692      	lsls	r2, r2, #26
 8004a2a:	d42b      	bmi.n	8004a84 <_printf_common+0xb0>
 8004a2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a30:	4641      	mov	r1, r8
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c8      	blx	r9
 8004a36:	3001      	adds	r0, #1
 8004a38:	d01e      	beq.n	8004a78 <_printf_common+0xa4>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	6922      	ldr	r2, [r4, #16]
 8004a3e:	f003 0306 	and.w	r3, r3, #6
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	bf02      	ittt	eq
 8004a46:	68e5      	ldreq	r5, [r4, #12]
 8004a48:	6833      	ldreq	r3, [r6, #0]
 8004a4a:	1aed      	subeq	r5, r5, r3
 8004a4c:	68a3      	ldr	r3, [r4, #8]
 8004a4e:	bf0c      	ite	eq
 8004a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a54:	2500      	movne	r5, #0
 8004a56:	4293      	cmp	r3, r2
 8004a58:	bfc4      	itt	gt
 8004a5a:	1a9b      	subgt	r3, r3, r2
 8004a5c:	18ed      	addgt	r5, r5, r3
 8004a5e:	2600      	movs	r6, #0
 8004a60:	341a      	adds	r4, #26
 8004a62:	42b5      	cmp	r5, r6
 8004a64:	d11a      	bne.n	8004a9c <_printf_common+0xc8>
 8004a66:	2000      	movs	r0, #0
 8004a68:	e008      	b.n	8004a7c <_printf_common+0xa8>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4652      	mov	r2, sl
 8004a6e:	4641      	mov	r1, r8
 8004a70:	4638      	mov	r0, r7
 8004a72:	47c8      	blx	r9
 8004a74:	3001      	adds	r0, #1
 8004a76:	d103      	bne.n	8004a80 <_printf_common+0xac>
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a80:	3501      	adds	r5, #1
 8004a82:	e7c6      	b.n	8004a12 <_printf_common+0x3e>
 8004a84:	18e1      	adds	r1, r4, r3
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	2030      	movs	r0, #48	@ 0x30
 8004a8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a8e:	4422      	add	r2, r4
 8004a90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a98:	3302      	adds	r3, #2
 8004a9a:	e7c7      	b.n	8004a2c <_printf_common+0x58>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	47c8      	blx	r9
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d0e6      	beq.n	8004a78 <_printf_common+0xa4>
 8004aaa:	3601      	adds	r6, #1
 8004aac:	e7d9      	b.n	8004a62 <_printf_common+0x8e>
	...

08004ab0 <_printf_i>:
 8004ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab4:	7e0f      	ldrb	r7, [r1, #24]
 8004ab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ab8:	2f78      	cmp	r7, #120	@ 0x78
 8004aba:	4691      	mov	r9, r2
 8004abc:	4680      	mov	r8, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	469a      	mov	sl, r3
 8004ac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ac6:	d807      	bhi.n	8004ad8 <_printf_i+0x28>
 8004ac8:	2f62      	cmp	r7, #98	@ 0x62
 8004aca:	d80a      	bhi.n	8004ae2 <_printf_i+0x32>
 8004acc:	2f00      	cmp	r7, #0
 8004ace:	f000 80d2 	beq.w	8004c76 <_printf_i+0x1c6>
 8004ad2:	2f58      	cmp	r7, #88	@ 0x58
 8004ad4:	f000 80b9 	beq.w	8004c4a <_printf_i+0x19a>
 8004ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004adc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ae0:	e03a      	b.n	8004b58 <_printf_i+0xa8>
 8004ae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ae6:	2b15      	cmp	r3, #21
 8004ae8:	d8f6      	bhi.n	8004ad8 <_printf_i+0x28>
 8004aea:	a101      	add	r1, pc, #4	@ (adr r1, 8004af0 <_printf_i+0x40>)
 8004aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004af0:	08004b49 	.word	0x08004b49
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	08004ad9 	.word	0x08004ad9
 8004afc:	08004ad9 	.word	0x08004ad9
 8004b00:	08004ad9 	.word	0x08004ad9
 8004b04:	08004ad9 	.word	0x08004ad9
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004ad9 	.word	0x08004ad9
 8004b10:	08004ad9 	.word	0x08004ad9
 8004b14:	08004ad9 	.word	0x08004ad9
 8004b18:	08004ad9 	.word	0x08004ad9
 8004b1c:	08004c5d 	.word	0x08004c5d
 8004b20:	08004b87 	.word	0x08004b87
 8004b24:	08004c17 	.word	0x08004c17
 8004b28:	08004ad9 	.word	0x08004ad9
 8004b2c:	08004ad9 	.word	0x08004ad9
 8004b30:	08004c7f 	.word	0x08004c7f
 8004b34:	08004ad9 	.word	0x08004ad9
 8004b38:	08004b87 	.word	0x08004b87
 8004b3c:	08004ad9 	.word	0x08004ad9
 8004b40:	08004ad9 	.word	0x08004ad9
 8004b44:	08004c1f 	.word	0x08004c1f
 8004b48:	6833      	ldr	r3, [r6, #0]
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6032      	str	r2, [r6, #0]
 8004b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e09d      	b.n	8004c98 <_printf_i+0x1e8>
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	1d19      	adds	r1, r3, #4
 8004b62:	6031      	str	r1, [r6, #0]
 8004b64:	0606      	lsls	r6, r0, #24
 8004b66:	d501      	bpl.n	8004b6c <_printf_i+0xbc>
 8004b68:	681d      	ldr	r5, [r3, #0]
 8004b6a:	e003      	b.n	8004b74 <_printf_i+0xc4>
 8004b6c:	0645      	lsls	r5, r0, #25
 8004b6e:	d5fb      	bpl.n	8004b68 <_printf_i+0xb8>
 8004b70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b74:	2d00      	cmp	r5, #0
 8004b76:	da03      	bge.n	8004b80 <_printf_i+0xd0>
 8004b78:	232d      	movs	r3, #45	@ 0x2d
 8004b7a:	426d      	negs	r5, r5
 8004b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b80:	4859      	ldr	r0, [pc, #356]	@ (8004ce8 <_printf_i+0x238>)
 8004b82:	230a      	movs	r3, #10
 8004b84:	e011      	b.n	8004baa <_printf_i+0xfa>
 8004b86:	6821      	ldr	r1, [r4, #0]
 8004b88:	6833      	ldr	r3, [r6, #0]
 8004b8a:	0608      	lsls	r0, r1, #24
 8004b8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b90:	d402      	bmi.n	8004b98 <_printf_i+0xe8>
 8004b92:	0649      	lsls	r1, r1, #25
 8004b94:	bf48      	it	mi
 8004b96:	b2ad      	uxthmi	r5, r5
 8004b98:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b9a:	4853      	ldr	r0, [pc, #332]	@ (8004ce8 <_printf_i+0x238>)
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	bf14      	ite	ne
 8004ba0:	230a      	movne	r3, #10
 8004ba2:	2308      	moveq	r3, #8
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004baa:	6866      	ldr	r6, [r4, #4]
 8004bac:	60a6      	str	r6, [r4, #8]
 8004bae:	2e00      	cmp	r6, #0
 8004bb0:	bfa2      	ittt	ge
 8004bb2:	6821      	ldrge	r1, [r4, #0]
 8004bb4:	f021 0104 	bicge.w	r1, r1, #4
 8004bb8:	6021      	strge	r1, [r4, #0]
 8004bba:	b90d      	cbnz	r5, 8004bc0 <_printf_i+0x110>
 8004bbc:	2e00      	cmp	r6, #0
 8004bbe:	d04b      	beq.n	8004c58 <_printf_i+0x1a8>
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8004bca:	5dc7      	ldrb	r7, [r0, r7]
 8004bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bd0:	462f      	mov	r7, r5
 8004bd2:	42bb      	cmp	r3, r7
 8004bd4:	460d      	mov	r5, r1
 8004bd6:	d9f4      	bls.n	8004bc2 <_printf_i+0x112>
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d10b      	bne.n	8004bf4 <_printf_i+0x144>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	07df      	lsls	r7, r3, #31
 8004be0:	d508      	bpl.n	8004bf4 <_printf_i+0x144>
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	6861      	ldr	r1, [r4, #4]
 8004be6:	4299      	cmp	r1, r3
 8004be8:	bfde      	ittt	le
 8004bea:	2330      	movle	r3, #48	@ 0x30
 8004bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bf4:	1b92      	subs	r2, r2, r6
 8004bf6:	6122      	str	r2, [r4, #16]
 8004bf8:	f8cd a000 	str.w	sl, [sp]
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	aa03      	add	r2, sp, #12
 8004c00:	4621      	mov	r1, r4
 8004c02:	4640      	mov	r0, r8
 8004c04:	f7ff fee6 	bl	80049d4 <_printf_common>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d14a      	bne.n	8004ca2 <_printf_i+0x1f2>
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	b004      	add	sp, #16
 8004c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	4833      	ldr	r0, [pc, #204]	@ (8004cec <_printf_i+0x23c>)
 8004c20:	2778      	movs	r7, #120	@ 0x78
 8004c22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	6831      	ldr	r1, [r6, #0]
 8004c2a:	061f      	lsls	r7, r3, #24
 8004c2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c30:	d402      	bmi.n	8004c38 <_printf_i+0x188>
 8004c32:	065f      	lsls	r7, r3, #25
 8004c34:	bf48      	it	mi
 8004c36:	b2ad      	uxthmi	r5, r5
 8004c38:	6031      	str	r1, [r6, #0]
 8004c3a:	07d9      	lsls	r1, r3, #31
 8004c3c:	bf44      	itt	mi
 8004c3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c42:	6023      	strmi	r3, [r4, #0]
 8004c44:	b11d      	cbz	r5, 8004c4e <_printf_i+0x19e>
 8004c46:	2310      	movs	r3, #16
 8004c48:	e7ac      	b.n	8004ba4 <_printf_i+0xf4>
 8004c4a:	4827      	ldr	r0, [pc, #156]	@ (8004ce8 <_printf_i+0x238>)
 8004c4c:	e7e9      	b.n	8004c22 <_printf_i+0x172>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f023 0320 	bic.w	r3, r3, #32
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	e7f6      	b.n	8004c46 <_printf_i+0x196>
 8004c58:	4616      	mov	r6, r2
 8004c5a:	e7bd      	b.n	8004bd8 <_printf_i+0x128>
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	6825      	ldr	r5, [r4, #0]
 8004c60:	6961      	ldr	r1, [r4, #20]
 8004c62:	1d18      	adds	r0, r3, #4
 8004c64:	6030      	str	r0, [r6, #0]
 8004c66:	062e      	lsls	r6, r5, #24
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	d501      	bpl.n	8004c70 <_printf_i+0x1c0>
 8004c6c:	6019      	str	r1, [r3, #0]
 8004c6e:	e002      	b.n	8004c76 <_printf_i+0x1c6>
 8004c70:	0668      	lsls	r0, r5, #25
 8004c72:	d5fb      	bpl.n	8004c6c <_printf_i+0x1bc>
 8004c74:	8019      	strh	r1, [r3, #0]
 8004c76:	2300      	movs	r3, #0
 8004c78:	6123      	str	r3, [r4, #16]
 8004c7a:	4616      	mov	r6, r2
 8004c7c:	e7bc      	b.n	8004bf8 <_printf_i+0x148>
 8004c7e:	6833      	ldr	r3, [r6, #0]
 8004c80:	1d1a      	adds	r2, r3, #4
 8004c82:	6032      	str	r2, [r6, #0]
 8004c84:	681e      	ldr	r6, [r3, #0]
 8004c86:	6862      	ldr	r2, [r4, #4]
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7fb fab0 	bl	80001f0 <memchr>
 8004c90:	b108      	cbz	r0, 8004c96 <_printf_i+0x1e6>
 8004c92:	1b80      	subs	r0, r0, r6
 8004c94:	6060      	str	r0, [r4, #4]
 8004c96:	6863      	ldr	r3, [r4, #4]
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca0:	e7aa      	b.n	8004bf8 <_printf_i+0x148>
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	4632      	mov	r2, r6
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	4640      	mov	r0, r8
 8004caa:	47d0      	blx	sl
 8004cac:	3001      	adds	r0, #1
 8004cae:	d0ad      	beq.n	8004c0c <_printf_i+0x15c>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	079b      	lsls	r3, r3, #30
 8004cb4:	d413      	bmi.n	8004cde <_printf_i+0x22e>
 8004cb6:	68e0      	ldr	r0, [r4, #12]
 8004cb8:	9b03      	ldr	r3, [sp, #12]
 8004cba:	4298      	cmp	r0, r3
 8004cbc:	bfb8      	it	lt
 8004cbe:	4618      	movlt	r0, r3
 8004cc0:	e7a6      	b.n	8004c10 <_printf_i+0x160>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4632      	mov	r2, r6
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	4640      	mov	r0, r8
 8004cca:	47d0      	blx	sl
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d09d      	beq.n	8004c0c <_printf_i+0x15c>
 8004cd0:	3501      	adds	r5, #1
 8004cd2:	68e3      	ldr	r3, [r4, #12]
 8004cd4:	9903      	ldr	r1, [sp, #12]
 8004cd6:	1a5b      	subs	r3, r3, r1
 8004cd8:	42ab      	cmp	r3, r5
 8004cda:	dcf2      	bgt.n	8004cc2 <_printf_i+0x212>
 8004cdc:	e7eb      	b.n	8004cb6 <_printf_i+0x206>
 8004cde:	2500      	movs	r5, #0
 8004ce0:	f104 0619 	add.w	r6, r4, #25
 8004ce4:	e7f5      	b.n	8004cd2 <_printf_i+0x222>
 8004ce6:	bf00      	nop
 8004ce8:	08004ff2 	.word	0x08004ff2
 8004cec:	08005003 	.word	0x08005003

08004cf0 <memmove>:
 8004cf0:	4288      	cmp	r0, r1
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	eb01 0402 	add.w	r4, r1, r2
 8004cf8:	d902      	bls.n	8004d00 <memmove+0x10>
 8004cfa:	4284      	cmp	r4, r0
 8004cfc:	4623      	mov	r3, r4
 8004cfe:	d807      	bhi.n	8004d10 <memmove+0x20>
 8004d00:	1e43      	subs	r3, r0, #1
 8004d02:	42a1      	cmp	r1, r4
 8004d04:	d008      	beq.n	8004d18 <memmove+0x28>
 8004d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d0e:	e7f8      	b.n	8004d02 <memmove+0x12>
 8004d10:	4402      	add	r2, r0
 8004d12:	4601      	mov	r1, r0
 8004d14:	428a      	cmp	r2, r1
 8004d16:	d100      	bne.n	8004d1a <memmove+0x2a>
 8004d18:	bd10      	pop	{r4, pc}
 8004d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d22:	e7f7      	b.n	8004d14 <memmove+0x24>

08004d24 <_sbrk_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d06      	ldr	r5, [pc, #24]	@ (8004d40 <_sbrk_r+0x1c>)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	602b      	str	r3, [r5, #0]
 8004d30:	f7fb ff82 	bl	8000c38 <_sbrk>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_sbrk_r+0x1a>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_sbrk_r+0x1a>
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	20000310 	.word	0x20000310

08004d44 <memcpy>:
 8004d44:	440a      	add	r2, r1
 8004d46:	4291      	cmp	r1, r2
 8004d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d4c:	d100      	bne.n	8004d50 <memcpy+0xc>
 8004d4e:	4770      	bx	lr
 8004d50:	b510      	push	{r4, lr}
 8004d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d5a:	4291      	cmp	r1, r2
 8004d5c:	d1f9      	bne.n	8004d52 <memcpy+0xe>
 8004d5e:	bd10      	pop	{r4, pc}

08004d60 <_realloc_r>:
 8004d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	4680      	mov	r8, r0
 8004d66:	4615      	mov	r5, r2
 8004d68:	460c      	mov	r4, r1
 8004d6a:	b921      	cbnz	r1, 8004d76 <_realloc_r+0x16>
 8004d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d70:	4611      	mov	r1, r2
 8004d72:	f7ff bc4b 	b.w	800460c <_malloc_r>
 8004d76:	b92a      	cbnz	r2, 8004d84 <_realloc_r+0x24>
 8004d78:	f7ff fbdc 	bl	8004534 <_free_r>
 8004d7c:	2400      	movs	r4, #0
 8004d7e:	4620      	mov	r0, r4
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d84:	f000 f81a 	bl	8004dbc <_malloc_usable_size_r>
 8004d88:	4285      	cmp	r5, r0
 8004d8a:	4606      	mov	r6, r0
 8004d8c:	d802      	bhi.n	8004d94 <_realloc_r+0x34>
 8004d8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d92:	d8f4      	bhi.n	8004d7e <_realloc_r+0x1e>
 8004d94:	4629      	mov	r1, r5
 8004d96:	4640      	mov	r0, r8
 8004d98:	f7ff fc38 	bl	800460c <_malloc_r>
 8004d9c:	4607      	mov	r7, r0
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d0ec      	beq.n	8004d7c <_realloc_r+0x1c>
 8004da2:	42b5      	cmp	r5, r6
 8004da4:	462a      	mov	r2, r5
 8004da6:	4621      	mov	r1, r4
 8004da8:	bf28      	it	cs
 8004daa:	4632      	movcs	r2, r6
 8004dac:	f7ff ffca 	bl	8004d44 <memcpy>
 8004db0:	4621      	mov	r1, r4
 8004db2:	4640      	mov	r0, r8
 8004db4:	f7ff fbbe 	bl	8004534 <_free_r>
 8004db8:	463c      	mov	r4, r7
 8004dba:	e7e0      	b.n	8004d7e <_realloc_r+0x1e>

08004dbc <_malloc_usable_size_r>:
 8004dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc0:	1f18      	subs	r0, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bfbc      	itt	lt
 8004dc6:	580b      	ldrlt	r3, [r1, r0]
 8004dc8:	18c0      	addlt	r0, r0, r3
 8004dca:	4770      	bx	lr

08004dcc <_init>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr

08004dd8 <_fini>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	bf00      	nop
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr
